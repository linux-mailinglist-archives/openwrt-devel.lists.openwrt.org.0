Return-Path: <openwrt-devel-bounces+lists+openwrt-devel=lfdr.de@lists.openwrt.org>
X-Original-To: lists+openwrt-devel@lfdr.de
Delivered-To: lists+openwrt-devel@lfdr.de
Received: from bombadil.infradead.org (bombadil.infradead.org [IPv6:2607:7c80:54:e::133])
	by mail.lfdr.de (Postfix) with ESMTPS id 41810174932
	for <lists+openwrt-devel@lfdr.de>; Sat, 29 Feb 2020 21:30:28 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=lists.infradead.org; s=bombadil.20170209; h=Sender:
	Content-Transfer-Encoding:Content-Type:List-Subscribe:List-Help:List-Post:
	List-Archive:List-Unsubscribe:List-Id:Subject:MIME-Version:Message-Id:Date:To
	:From:Reply-To:Cc:Content-ID:Content-Description:Resent-Date:Resent-From:
	Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:In-Reply-To:References:
	List-Owner; bh=YmWkYkVXxOko29qF2u5hg3jetRy+MGoPilK9N4y6rHI=; b=G6tE3RCYxUi348
	J/ipF/jyK1ZxcLG6GRYe31e59KSAECcLNPbE52PaHOaU3RlXz1n2N2sL/giccDYmY3rPlCZnFLTvo
	O0sgOOjufpblxRQSGZJk8VjCJflKBy/qW0R+5sZyN+2ePlf8rjSTG1U1obLom/r6V0eY0xwv2GXbV
	dwmdTVva06KOO4shZMjGNfdbgOc4/WQKjD6METCSqLR9kKrlq9tIIhxbt8uR4qX87e+NAirksg+5I
	Q/pUn2RBSTkKMGpTgAbziKypUYj2jRORKmDECRNfrZ2o8KIcszF2KYW5cbmrtrxCu5/+DGg7Gk6zc
	0xiIHX4JWxdAgOVsDAEw==;
Received: from localhost ([127.0.0.1] helo=bombadil.infradead.org)
	by bombadil.infradead.org with esmtp (Exim 4.92.3 #3 (Red Hat Linux))
	id 1j88kX-000477-2d; Sat, 29 Feb 2020 20:30:13 +0000
Received: from mail-wr1-x442.google.com ([2a00:1450:4864:20::442])
 by bombadil.infradead.org with esmtps (Exim 4.92.3 #3 (Red Hat Linux))
 id 1j88kE-00046i-F0
 for openwrt-devel@lists.openwrt.org; Sat, 29 Feb 2020 20:29:57 +0000
Received: by mail-wr1-x442.google.com with SMTP id y17so7611240wrn.6
 for <openwrt-devel@lists.openwrt.org>; Sat, 29 Feb 2020 12:29:53 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=20161025;
 h=from:to:subject:date:message-id:mime-version
 :content-transfer-encoding;
 bh=JrlGFCnfFfZ6aUflbfdiYR5++SIpaiFZB0CqXGAtf7c=;
 b=ryLE7ZX0YGqOHJUCMLZZtNBr73J39at5spygE5gj0x54o0lr8lKNLEhKD7qF/gG3eD
 vzNEzY2XJsCF0NlOydPrQId9FbFxEEfcH6kI34UnPK81mZkqd8yCX5aDPHxicKkl8fni
 Qh5c3UVgZOFbG0qHANiOgK71DnZ5BtOoB/4ebOKz5Fox01Xc/or2rg3u6gsGqRFUkq6D
 hF/B5bpEyZ1YZZiB+IJYcV9oGqBxQxQyKjbkNiA5WLtH5eHOh3f/BbqFcq8CCHGszz/n
 k/+UreoMgwdhGf+V26wJ/SfOG8coqWtIKDbV8VymOKsIlPQedd7k1iU4Tm2b9qOHbLJy
 crHg==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
 d=1e100.net; s=20161025;
 h=x-gm-message-state:from:to:subject:date:message-id:mime-version
 :content-transfer-encoding;
 bh=JrlGFCnfFfZ6aUflbfdiYR5++SIpaiFZB0CqXGAtf7c=;
 b=VFikNwJHCGBEYg09S13cwi2qLY3OsiYl4yY0CWyTckpQLNVeH8TXpnk0hdays6C1o+
 HlQJkmI2gLRLw3LhLdOII9XzDlCB2bel4B5mG1Ny+eIt5yf5UZJRGPbQWnUGi70azNzU
 F8+/iWveCSCCgfoXOCnLwD+AZ86Zca2pbDo3wzmzY6aD+l1fCYm8VwXzVkUSFin0/4H4
 iLNATLKEKVxCuZLMVv2hmKQTmSC0U981v9bJ7hYxsexaCyUMMzlrf4w10YQs0TRjOws0
 uIj/bRROZQgvkWdYECfB4rRARGqh1BQjSXJhGkdc583BgfZGhf97rfqzqbSxCXT6hmwT
 OVFQ==
X-Gm-Message-State: APjAAAW7kNuVUI5b4yTnzxbYYNDzVrRThPtJHy5XdgxspGHwC4YdJWBn
 T2q0ozahubMA7HsJQiAru1Q6iH4p
X-Google-Smtp-Source: APXvYqwaD5qo3ED1l1h5wZP4PMAB18drTVW0kESiFcdmiojKCBmB1+QRww1OzRk9QegevoqPpmKHAg==
X-Received: by 2002:adf:f84a:: with SMTP id d10mr12197816wrq.208.1583008190622; 
 Sat, 29 Feb 2020 12:29:50 -0800 (PST)
Received: from debian64.daheim (p5B0D7E78.dip0.t-ipconnect.de. [91.13.126.120])
 by smtp.gmail.com with ESMTPSA id u185sm8145712wmg.6.2020.02.29.12.29.49
 for <openwrt-devel@lists.openwrt.org>
 (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);
 Sat, 29 Feb 2020 12:29:49 -0800 (PST)
Received: from chuck by debian64.daheim with local (Exim 4.93)
 (envelope-from <chunkeey@gmail.com>) id 1j88k8-006uPR-W3
 for openwrt-devel@lists.openwrt.org; Sat, 29 Feb 2020 21:29:49 +0100
From: Christian Lamparter <chunkeey@gmail.com>
To: openwrt-devel@lists.openwrt.org
Date: Sat, 29 Feb 2020 21:29:48 +0100
Message-Id: <20200229202948.1646762-1-chunkeey@gmail.com>
X-Mailer: git-send-email 2.25.1
MIME-Version: 1.0
X-CRM114-Version: 20100106-BlameMichelson ( TRE 0.8.0 (BSD) ) MR-646709E3 
X-CRM114-CacheID: sfid-20200229_122954_539873_2B6A757E 
X-CRM114-Status: GOOD (  20.51  )
X-Spam-Score: -0.2 (/)
X-Spam-Report: SpamAssassin version 3.4.3 on bombadil.infradead.org summary:
 Content analysis details:   (-0.2 points)
 pts rule name              description
 ---- ---------------------- --------------------------------------------------
 -0.0 RCVD_IN_DNSWL_NONE     RBL: Sender listed at https://www.dnswl.org/,
 no trust [2a00:1450:4864:20:0:0:0:442 listed in]
 [list.dnswl.org]
 0.0 SPF_HELO_NONE          SPF: HELO does not publish an SPF Record
 -0.0 SPF_PASS               SPF: sender matches SPF record
 0.0 FREEMAIL_FROM          Sender email is commonly abused enduser mail
 provider [chunkeey[at]gmail.com]
 -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 -0.1 DKIM_VALID_EF          Message has a valid DKIM or DK signature from
 envelope-from domain
 -0.1 DKIM_VALID_AU          Message has a valid DKIM or DK signature from
 author's domain
 0.1 DKIM_SIGNED            Message has a DKIM or DK signature, not necessarily
 valid
Subject: [OpenWrt-Devel] [RFC PATCH] kernel: backport and package drivetemp
 hwmon from v5.5
X-BeenThere: openwrt-devel@lists.openwrt.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: <openwrt-devel.lists.openwrt.org>
List-Unsubscribe: <http://lists.infradead.org/mailman/options/openwrt-devel>, 
 <mailto:openwrt-devel-request@lists.openwrt.org?subject=unsubscribe>
List-Archive: <http://lists.infradead.org/pipermail/openwrt-devel/>
List-Post: <mailto:openwrt-devel@lists.openwrt.org>
List-Help: <mailto:openwrt-devel-request@lists.openwrt.org?subject=help>
List-Subscribe: <http://lists.infradead.org/mailman/listinfo/openwrt-devel>,
 <mailto:openwrt-devel-request@lists.openwrt.org?subject=subscribe>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Sender: "openwrt-devel" <openwrt-devel-bounces@lists.openwrt.org>
Errors-To: openwrt-devel-bounces+lists+openwrt-devel=lfdr.de@lists.openwrt.org

VGhpcyBwYXRjaCBiYWNrcG9ydHMgdGhlIGh3bW9uIGRyaXZldGVtcCBzZW5zb3IgbW9kdWxlIGZy
b20gdmFuaWxsYQpsaW51eCA1LjUgdG8gYmUgYXZhaWxhYmxlIG9uIE9wZW5XcnQncyA1LjQga2Vy
bmVsLgoKRXh0cmFjdCBmcm9tIFRoZSB1cHN0cmVhbSBjb21taXQgYnkgR3VlbnRlciBSb2VjayA8
bGludXhAcm9lY2stdXMubmV0PjoKaHdtb246IERyaXZlciBmb3IgZGlzayBhbmQgc29saWQgc3Rh
dGUgZHJpdmVzIHdpdGggdGVtcGVyYXR1cmUgc2Vuc29ycwoKIlJlYWRpbmcgdGhlIHRlbXBlcmF0
dXJlIG9mIEFUQSBkcml2ZXMgaGFzIGJlZW4gc3VwcG9ydGVkIGZvciB5ZWFycwpieSB1c2Vyc3Bh
Y2UgdG9vbHMgc3VjaCBhcyBzbWFydHRvb2xzIG9yIGhkZHRlbXAuIFRoZSBkb3duc2lkZSBvZgpz
dWNoIHRvb2xzIGlzIHRoYXQgdGhleSBuZWVkIHRvIHJ1biB3aXRoIHN1cGVyLXVzZXIgcHJpdmls
ZWdlLCB0aGF0CnRoZSB0ZW1wZXJhdHVyZXMgYXJlIG5vdCByZXBvcnRlZCBieSBzdGFuZGFyZCB0
b29scyBzdWNoIGFzICdzZW5zb3JzJwpvciAnbGlic2Vuc29ycycsIGFuZCB0aGF0IGRyaXZlIHRl
bXBlcmF0dXJlcyBhcmUgbm90IGF2YWlsYWJsZSBmb3IgdXNlCmluIHRoZSBrZXJuZWwncyB0aGVy
bWFsIHN1YnN5c3RlbS4KClRoaXMgZHJpdmVyIHNvbHZlcyB0aGlzIHByb2JsZW0gYnkgYWRkaW5n
IHN1cHBvcnQgZm9yIHJlYWRpbmcgdGhlCnRlbXBlcmF0dXJlIG9mIEFUQSBkcml2ZXMgZnJvbSB0
aGUga2VybmVsIHVzaW5nIHRoZSBod21vbiBBUEkgYW5kCmJ5IGFkZGluZyBhIHRlbXBlcmF0dXJl
IHpvbmUgZm9yIGVhY2ggZHJpdmUuCgpXaXRoIHRoaXMgZHJpdmVyLCB0aGUgaGFyZCBkaXNrIHRl
bXBlcmF0dXJlIGNhbiBiZSByZWFkIFsuLi5dCnVzaW5nIHN5c2ZzOgoKJCBncmVwIC4gL3N5cy9j
bGFzcy9od21vbi9od21vbjkve25hbWUsdGVtcDFfaW5wdXR9Ci9zeXMvY2xhc3MvaHdtb24vaHdt
b245L25hbWU6ZHJpdmV0ZW1wCi9zeXMvY2xhc3MvaHdtb24vaHdtb245L3RlbXAxX2lucHV0OjIz
MDAwCgpJZiB0aGUgZHJpdmUgc3VwcG9ydHMgU0NUIHRyYW5zcG9ydCBhbmQgcmVwb3J0cyB0ZW1w
ZXJhdHVyZSBsaW1pdHMsCnRob3NlIGFyZSByZXBvcnRlZCBhcyB3ZWxsLgoKZHJpdmV0ZW1wLXNj
c2ktMC0wCkFkYXB0ZXI6IFNDU0kgYWRhcHRlcgp0ZW1wMTogICAgICAgICsyNy4wPEMyPjxCMD5D
IChsb3cgID0gICswLjA8QzI+PEIwPkMsIGhpZ2ggPSArNjAuMDxDMj48QjA+QykKICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAoY3JpdCBsb3cgPSAtNDEuMDxDMj48QjA+QywgY3JpdCA9ICs4
NS4wPEMyPjxCMD5DKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsb3dlc3QgPSArMjMu
MDxDMj48QjA+QywgaGlnaGVzdCA9ICszNC4wPEMyPjxCMD5DKQoKVGhlIGRyaXZlciBhdHRlbXB0
cyB0byB1c2UgU0NUIENvbW1hbmQgVHJhbnNwb3J0IHRvIHJlYWQgdGhlIGRyaXZlCnRlbXBlcmF0
dXJlLiBJZiB0aGUgU0NUIENvbW1hbmQgVHJhbnNwb3J0IGZlYXR1cmUgc2V0IGlzIG5vdCBhdmFp
bGFibGUsCm9yIGlmIGl0IGRvZXMgbm90IHJlcG9ydCB0aGUgZHJpdmUgdGVtcGVyYXR1cmUsIGRy
aXZlIHRlbXBlcmF0dXJlcyBtYXkKYmUgcmVhZGFibGUgdGhyb3VnaCBTTUFSVCBhdHRyaWJ1dGVz
LiBTaW5jZSBTTUFSVCBhdHRyaWJ1dGVzIGFyZSBub3Qgd2VsbApkZWZpbmVkLCB0aGlzIG1ldGhv
ZCBpcyBvbmx5IHVzZWQgYXMgZmFsbGJhY2sgbWVjaGFuaXNtLiIKClNpZ25lZC1vZmYtYnk6IENo
cmlzdGlhbiBMYW1wYXJ0ZXIgPGNodW5rZWV5QGdtYWlsLmNvbT4KLS0tCgpNeSBtb3RpdmF0aW9u
IGZvciBwYWNrYWdpbmcgdGhpcyBtb2R1bGUgY29tZXMgZnJvbSBtYWtpbmcgdGhlCldORFI0NzAw
IHRvIGJlaGF2ZSBhcyBjbG9zZSB0byB3aGF0IHRoZSBOZXRnZWFyJ3MgZmlybXdhcmUgZG9lcy4K
VGhlIGZhbiBzaG91bGQga2ljayBpbiB3aGVuIHRoZSBkcml2ZSBnZXRzIGhvdCBhbmQgZm9yIHRo
aXMgdG8Kd29yaywgdGhlIGNvb2xpbmcgem9uZXMgbmVlZCB0byBoYXZlIGEgcHJvcGVyIHNlbnNv
ciB0aGF0IGhhcwp0aGUgdGVtcGVyYXR1cmUgb2YgdGhlIEhERCB0byBwcm9wZXJseSBjb250cm9s
IHRoZSBjb29saW5nIGRldmljZS4KLS0tCiBwYWNrYWdlL2tlcm5lbC9saW51eC9tb2R1bGVzL2h3
bW9uLm1rICAgICAgICAgfCAgMTUgKwogLi4uc2ZzLWF0dHJpYnV0ZXMtZm9yLVZQRC1wYWdlcy0w
aC1hbmQtLnBhdGNoIHwgMTIyICsrKwogLi4uLWRpc2stYW5kLXNvbGlkLXN0YXRlLWRyaXZlcy13
aXRoLXRlLnBhdGNoIHwgNzM3ICsrKysrKysrKysrKysrKysrKwogMyBmaWxlcyBjaGFuZ2VkLCA4
NzQgaW5zZXJ0aW9ucygrKQogY3JlYXRlIG1vZGUgMTAwNjQ0IHRhcmdldC9saW51eC9nZW5lcmlj
L2JhY2twb3J0LTUuNC84MDAtdjUuNS1zY3NpLWNvcmUtQWRkLXN5c2ZzLWF0dHJpYnV0ZXMtZm9y
LVZQRC1wYWdlcy0waC1hbmQtLnBhdGNoCiBjcmVhdGUgbW9kZSAxMDA2NDQgdGFyZ2V0L2xpbnV4
L2dlbmVyaWMvYmFja3BvcnQtNS40LzgwMS12NS41LWh3bW9uLURyaXZlci1mb3ItZGlzay1hbmQt
c29saWQtc3RhdGUtZHJpdmVzLXdpdGgtdGUucGF0Y2gKCmRpZmYgLS1naXQgYS9wYWNrYWdlL2tl
cm5lbC9saW51eC9tb2R1bGVzL2h3bW9uLm1rIGIvcGFja2FnZS9rZXJuZWwvbGludXgvbW9kdWxl
cy9od21vbi5tawppbmRleCBjMGE0Nzc4NTZlLi5lZDBlZTQ0MjQxIDEwMDY0NAotLS0gYS9wYWNr
YWdlL2tlcm5lbC9saW51eC9tb2R1bGVzL2h3bW9uLm1rCisrKyBiL3BhY2thZ2Uva2VybmVsL2xp
bnV4L21vZHVsZXMvaHdtb24ubWsKQEAgLTc3LDYgKzc3LDIxIEBAIGVuZGVmCiAkKGV2YWwgJChj
YWxsIEtlcm5lbFBhY2thZ2UsaHdtb24tYWR0NzQ3NSkpCiAKIAorZGVmaW5lIEtlcm5lbFBhY2th
Z2UvaHdtb24tZHJpdmV0ZW1wCisgIFRJVExFOj1IYXJkIGRpc2sgZHJpdmVzIHdpdGggdGVtcGVy
YXR1cmUgc2Vuc29yCisgIEtDT05GSUc6PUNPTkZJR19TRU5TT1JTX0RSSVZFVEVNUAorICBGSUxF
Uzo9JChMSU5VWF9ESVIpL2RyaXZlcnMvaHdtb24vZHJpdmV0ZW1wLmtvCisgIEFVVE9MT0FEOj0k
KGNhbGwgQXV0b0xvYWQsNjAsZHJpdmV0ZW1wKQorICAkKGNhbGwgQWRkRGVwZW5kcy9od21vbiwr
a21vZC1hdGEtY29yZSAra21vZC1zY3NpLWNvcmUpCitlbmRlZgorCitkZWZpbmUgS2VybmVsUGFj
a2FnZS9od21vbi1kcml2ZXRlbXAvZGVzY3JpcHRpb24KKyBLZXJuZWwgbW9kdWxlIGZvciBIYXJk
IGRpc2sgZHJpdmVzIHdpdGggdGVtcGVyYXR1cmUgc2Vuc29yCitlbmRlZgorCiskKGV2YWwgJChj
YWxsIEtlcm5lbFBhY2thZ2UsaHdtb24tZHJpdmV0ZW1wKSkKKworCiBkZWZpbmUgS2VybmVsUGFj
a2FnZS9od21vbi1ncGlvZmFuCiAgIFRJVExFOj1HZW5lcmljIEdQSU8gRkFOIHN1cHBvcnQKICAg
S0NPTkZJRzo9Q09ORklHX1NFTlNPUlNfR1BJT19GQU4KZGlmZiAtLWdpdCBhL3RhcmdldC9saW51
eC9nZW5lcmljL2JhY2twb3J0LTUuNC84MDAtdjUuNS1zY3NpLWNvcmUtQWRkLXN5c2ZzLWF0dHJp
YnV0ZXMtZm9yLVZQRC1wYWdlcy0waC1hbmQtLnBhdGNoIGIvdGFyZ2V0L2xpbnV4L2dlbmVyaWMv
YmFja3BvcnQtNS40LzgwMC12NS41LXNjc2ktY29yZS1BZGQtc3lzZnMtYXR0cmlidXRlcy1mb3It
VlBELXBhZ2VzLTBoLWFuZC0ucGF0Y2gKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAw
MDAwMC4uZGM4OWIyNzllNQotLS0gL2Rldi9udWxsCisrKyBiL3RhcmdldC9saW51eC9nZW5lcmlj
L2JhY2twb3J0LTUuNC84MDAtdjUuNS1zY3NpLWNvcmUtQWRkLXN5c2ZzLWF0dHJpYnV0ZXMtZm9y
LVZQRC1wYWdlcy0waC1hbmQtLnBhdGNoCkBAIC0wLDAgKzEsMTIyIEBACitGcm9tIGQxODhiMDY3
NWIyMWQ1YTZjYTI3YjNlNzQxMzgxODEzOTgzZjQ3MTkgTW9uIFNlcCAxNyAwMDowMDowMCAyMDAx
CitGcm9tOiBSeWFuIEF0dGFyZCA8cnlhbmF0dGFyZEByeWFuYXR0YXJkLmluZm8+CitEYXRlOiBU
aHUsIDI2IFNlcCAyMDE5IDExOjIyOjE3IC0wNTAwCitTdWJqZWN0OiBbUEFUQ0hdIHNjc2k6IGNv
cmU6IEFkZCBzeXNmcyBhdHRyaWJ1dGVzIGZvciBWUEQgcGFnZXMgMGggYW5kIDg5aAorCitBZGQg
c3lzZnMgYXR0cmlidXRlcyBmb3IgdGhlIEFUQSBpbmZvcm1hdGlvbiBwYWdlIGFuZCBTdXBwb3J0
ZWQgVlBEIFBhZ2VzCitwYWdlLgorCitMaW5rOiBodHRwczovL2xvcmUua2VybmVsLm9yZy9yLzIw
MTkwOTI2MTYyMjE2LjU2NTkxLTEtcnlhbmF0dGFyZEByeWFuYXR0YXJkLmluZm8KK1NpZ25lZC1v
ZmYtYnk6IFJ5YW4gQXR0YXJkIDxyeWFuYXR0YXJkQHJ5YW5hdHRhcmQuaW5mbz4KK1Jldmlld2Vk
LWJ5OiBCYXJ0IFZhbiBBc3NjaGUgPGJ2YW5hc3NjaGVAYWNtLm9yZz4KK1NpZ25lZC1vZmYtYnk6
IE1hcnRpbiBLLiBQZXRlcnNlbiA8bWFydGluLnBldGVyc2VuQG9yYWNsZS5jb20+CistLS0KKyBk
cml2ZXJzL3Njc2kvc2NzaS5jICAgICAgICB8ICA0ICsrKysKKyBkcml2ZXJzL3Njc2kvc2NzaV9z
eXNmcy5jICB8IDE5ICsrKysrKysrKysrKysrKysrKysKKyBpbmNsdWRlL3Njc2kvc2NzaV9kZXZp
Y2UuaCB8ICAyICsrCisgMyBmaWxlcyBjaGFuZ2VkLCAyNSBpbnNlcnRpb25zKCspCisKKy0tLSBh
L2RyaXZlcnMvc2NzaS9zY3NpLmMKKysrKyBiL2RyaXZlcnMvc2NzaS9zY3NpLmMKK0BAIC00NjUs
MTAgKzQ2NSwxNCBAQCB2b2lkIHNjc2lfYXR0YWNoX3ZwZChzdHJ1Y3Qgc2NzaV9kZXZpY2UKKyAJ
CXJldHVybjsKKyAKKyAJZm9yIChpID0gNDsgaSA8IHZwZF9idWYtPmxlbjsgaSsrKSB7CisrCQlp
ZiAodnBkX2J1Zi0+ZGF0YVtpXSA9PSAweDApCisrCQkJc2NzaV91cGRhdGVfdnBkX3BhZ2Uoc2Rl
diwgMHgwLCAmc2Rldi0+dnBkX3BnMCk7CisgCQlpZiAodnBkX2J1Zi0+ZGF0YVtpXSA9PSAweDgw
KQorIAkJCXNjc2lfdXBkYXRlX3ZwZF9wYWdlKHNkZXYsIDB4ODAsICZzZGV2LT52cGRfcGc4MCk7
CisgCQlpZiAodnBkX2J1Zi0+ZGF0YVtpXSA9PSAweDgzKQorIAkJCXNjc2lfdXBkYXRlX3ZwZF9w
YWdlKHNkZXYsIDB4ODMsICZzZGV2LT52cGRfcGc4Myk7CisrCQlpZiAodnBkX2J1Zi0+ZGF0YVtp
XSA9PSAweDg5KQorKwkJCXNjc2lfdXBkYXRlX3ZwZF9wYWdlKHNkZXYsIDB4ODksICZzZGV2LT52
cGRfcGc4OSk7CisgCX0KKyAJa2ZyZWUodnBkX2J1Zik7CisgfQorLS0tIGEvZHJpdmVycy9zY3Np
L3Njc2lfc3lzZnMuYworKysrIGIvZHJpdmVycy9zY3NpL3Njc2lfc3lzZnMuYworQEAgLTQzNyw2
ICs0MzcsNyBAQCBzdGF0aWMgdm9pZCBzY3NpX2RldmljZV9kZXZfcmVsZWFzZV91c2VyCisgCXN0
cnVjdCBkZXZpY2UgKnBhcmVudDsKKyAJc3RydWN0IGxpc3RfaGVhZCAqdGhpcywgKnRtcDsKKyAJ
c3RydWN0IHNjc2lfdnBkICp2cGRfcGc4MCA9IE5VTEwsICp2cGRfcGc4MyA9IE5VTEw7CisrCXN0
cnVjdCBzY3NpX3ZwZCAqdnBkX3BnMCA9IE5VTEwsICp2cGRfcGc4OSA9IE5VTEw7CisgCXVuc2ln
bmVkIGxvbmcgZmxhZ3M7CisgCisgCXNkZXYgPSBjb250YWluZXJfb2Yod29yaywgc3RydWN0IHNj
c2lfZGV2aWNlLCBldy53b3JrKTsKK0BAIC00NjYsMTYgKzQ2NywyNCBAQCBzdGF0aWMgdm9pZCBz
Y3NpX2RldmljZV9kZXZfcmVsZWFzZV91c2VyCisgCXNkZXYtPnJlcXVlc3RfcXVldWUgPSBOVUxM
OworIAorIAltdXRleF9sb2NrKCZzZGV2LT5pbnF1aXJ5X211dGV4KTsKKysJcmN1X3N3YXBfcHJv
dGVjdGVkKHNkZXYtPnZwZF9wZzAsIHZwZF9wZzAsCisrCQkJICAgbG9ja2RlcF9pc19oZWxkKCZz
ZGV2LT5pbnF1aXJ5X211dGV4KSk7CisgCXJjdV9zd2FwX3Byb3RlY3RlZChzZGV2LT52cGRfcGc4
MCwgdnBkX3BnODAsCisgCQkJICAgbG9ja2RlcF9pc19oZWxkKCZzZGV2LT5pbnF1aXJ5X211dGV4
KSk7CisgCXJjdV9zd2FwX3Byb3RlY3RlZChzZGV2LT52cGRfcGc4MywgdnBkX3BnODMsCisgCQkJ
ICAgbG9ja2RlcF9pc19oZWxkKCZzZGV2LT5pbnF1aXJ5X211dGV4KSk7CisrCXJjdV9zd2FwX3By
b3RlY3RlZChzZGV2LT52cGRfcGc4OSwgdnBkX3BnODksCisrCQkJICAgbG9ja2RlcF9pc19oZWxk
KCZzZGV2LT5pbnF1aXJ5X211dGV4KSk7CisgCW11dGV4X3VubG9jaygmc2Rldi0+aW5xdWlyeV9t
dXRleCk7CisgCisrCWlmICh2cGRfcGcwKQorKwkJa2ZyZWVfcmN1KHZwZF9wZzAsIHJjdSk7Cisg
CWlmICh2cGRfcGc4MykKKyAJCWtmcmVlX3JjdSh2cGRfcGc4MywgcmN1KTsKKyAJaWYgKHZwZF9w
ZzgwKQorIAkJa2ZyZWVfcmN1KHZwZF9wZzgwLCByY3UpOworKwlpZiAodnBkX3BnODkpCisrCQlr
ZnJlZV9yY3UodnBkX3BnODksIHJjdSk7CisgCWtmcmVlKHNkZXYtPmlucXVpcnkpOworIAlrZnJl
ZShzZGV2KTsKKyAKK0BAIC04NjgsNiArODc3LDggQEAgc3RhdGljIHN0cnVjdCBiaW5fYXR0cmli
dXRlIGRldl9hdHRyX3ZwZAorIAorIHNkZXZfdnBkX3BnX2F0dHIocGc4Myk7Cisgc2Rldl92cGRf
cGdfYXR0cihwZzgwKTsKKytzZGV2X3ZwZF9wZ19hdHRyKHBnODkpOworK3NkZXZfdnBkX3BnX2F0
dHIocGcwKTsKKyAKKyBzdGF0aWMgc3NpemVfdCBzaG93X2lucXVpcnkoc3RydWN0IGZpbGUgKmZp
bGVwLCBzdHJ1Y3Qga29iamVjdCAqa29iaiwKKyAJCQkgICAgc3RydWN0IGJpbl9hdHRyaWJ1dGUg
KmJpbl9hdHRyLAorQEAgLTEyMDAsMTIgKzEyMTEsMTggQEAgc3RhdGljIHVtb2RlX3Qgc2NzaV9z
ZGV2X2Jpbl9hdHRyX2lzX3ZpcworIAlzdHJ1Y3Qgc2NzaV9kZXZpY2UgKnNkZXYgPSB0b19zY3Np
X2RldmljZShkZXYpOworIAorIAorKwlpZiAoYXR0ciA9PSAmZGV2X2F0dHJfdnBkX3BnMCAmJiAh
c2Rldi0+dnBkX3BnMCkKKysJCXJldHVybiAwOworKworIAlpZiAoYXR0ciA9PSAmZGV2X2F0dHJf
dnBkX3BnODAgJiYgIXNkZXYtPnZwZF9wZzgwKQorIAkJcmV0dXJuIDA7CisgCisgCWlmIChhdHRy
ID09ICZkZXZfYXR0cl92cGRfcGc4MyAmJiAhc2Rldi0+dnBkX3BnODMpCisgCQlyZXR1cm4gMDsK
KyAKKysJaWYgKGF0dHIgPT0gJmRldl9hdHRyX3ZwZF9wZzg5ICYmICFzZGV2LT52cGRfcGc4OSkK
KysJCXJldHVybiAwOworKworIAlyZXR1cm4gU19JUlVHTzsKKyB9CisgCitAQCAtMTI0OCw4ICsx
MjY1LDEwIEBAIHN0YXRpYyBzdHJ1Y3QgYXR0cmlidXRlICpzY3NpX3NkZXZfYXR0cnMKKyB9Owor
IAorIHN0YXRpYyBzdHJ1Y3QgYmluX2F0dHJpYnV0ZSAqc2NzaV9zZGV2X2Jpbl9hdHRyc1tdID0g
eworKwkmZGV2X2F0dHJfdnBkX3BnMCwKKyAJJmRldl9hdHRyX3ZwZF9wZzgzLAorIAkmZGV2X2F0
dHJfdnBkX3BnODAsCisrCSZkZXZfYXR0cl92cGRfcGc4OSwKKyAJJmRldl9hdHRyX2lucXVpcnks
CisgCU5VTEwKKyB9OworLS0tIGEvaW5jbHVkZS9zY3NpL3Njc2lfZGV2aWNlLmgKKysrKyBiL2lu
Y2x1ZGUvc2NzaS9zY3NpX2RldmljZS5oCitAQCAtMTQwLDggKzE0MCwxMCBAQCBzdHJ1Y3Qgc2Nz
aV9kZXZpY2UgeworIAljb25zdCBjaGFyICogcmV2OwkJLyogLi4uICJudWxsbnVsbG51bGxudWxs
IiBiZWZvcmUgc2NhbiAqLworIAorICNkZWZpbmUgU0NTSV9WUERfUEdfTEVOICAgICAgICAgICAg
ICAgIDI1NQorKwlzdHJ1Y3Qgc2NzaV92cGQgX19yY3UgKnZwZF9wZzA7CisgCXN0cnVjdCBzY3Np
X3ZwZCBfX3JjdSAqdnBkX3BnODM7CisgCXN0cnVjdCBzY3NpX3ZwZCBfX3JjdSAqdnBkX3BnODA7
CisrCXN0cnVjdCBzY3NpX3ZwZCBfX3JjdSAqdnBkX3BnODk7CisgCXVuc2lnbmVkIGNoYXIgY3Vy
cmVudF90YWc7CS8qIGN1cnJlbnQgdGFnICovCisgCXN0cnVjdCBzY3NpX3RhcmdldCAgICAgICpz
ZGV2X3RhcmdldDsgICAvKiB1c2VkIG9ubHkgZm9yIHNpbmdsZV9sdW4gKi8KKyAKZGlmZiAtLWdp
dCBhL3RhcmdldC9saW51eC9nZW5lcmljL2JhY2twb3J0LTUuNC84MDEtdjUuNS1od21vbi1Ecml2
ZXItZm9yLWRpc2stYW5kLXNvbGlkLXN0YXRlLWRyaXZlcy13aXRoLXRlLnBhdGNoIGIvdGFyZ2V0
L2xpbnV4L2dlbmVyaWMvYmFja3BvcnQtNS40LzgwMS12NS41LWh3bW9uLURyaXZlci1mb3ItZGlz
ay1hbmQtc29saWQtc3RhdGUtZHJpdmVzLXdpdGgtdGUucGF0Y2gKbmV3IGZpbGUgbW9kZSAxMDA2
NDQKaW5kZXggMDAwMDAwMDAwMC4uMzJhNjI5NzcyZgotLS0gL2Rldi9udWxsCisrKyBiL3Rhcmdl
dC9saW51eC9nZW5lcmljL2JhY2twb3J0LTUuNC84MDEtdjUuNS1od21vbi1Ecml2ZXItZm9yLWRp
c2stYW5kLXNvbGlkLXN0YXRlLWRyaXZlcy13aXRoLXRlLnBhdGNoCkBAIC0wLDAgKzEsNzM3IEBA
CitGcm9tIDViNDY5MDNkOGJmMzcyZTU2M2JmMjE1MGQ0NmI4N2ZmZjE5N2ExMDkgTW9uIFNlcCAx
NyAwMDowMDowMCAyMDAxCitGcm9tOiBHdWVudGVyIFJvZWNrIDxsaW51eEByb2Vjay11cy5uZXQ+
CitEYXRlOiBUaHUsIDI4IE5vdiAyMDE5IDIxOjM0OjQwIC0wODAwCitTdWJqZWN0OiBbUEFUQ0hd
IGh3bW9uOiBEcml2ZXIgZm9yIGRpc2sgYW5kIHNvbGlkIHN0YXRlIGRyaXZlcyB3aXRoCisgdGVt
cGVyYXR1cmUgc2Vuc29ycworTUlNRS1WZXJzaW9uOiAxLjAKK0NvbnRlbnQtVHlwZTogdGV4dC9w
bGFpbjsgY2hhcnNldD1VVEYtOAorQ29udGVudC1UcmFuc2Zlci1FbmNvZGluZzogOGJpdAorCitS
ZWFkaW5nIHRoZSB0ZW1wZXJhdHVyZSBvZiBBVEEgZHJpdmVzIGhhcyBiZWVuIHN1cHBvcnRlZCBm
b3IgeWVhcnMKK2J5IHVzZXJzcGFjZSB0b29scyBzdWNoIGFzIHNtYXJ0dG9vbHMgb3IgaGRkdGVt
cC4gVGhlIGRvd25zaWRlIG9mCitzdWNoIHRvb2xzIGlzIHRoYXQgdGhleSBuZWVkIHRvIHJ1biB3
aXRoIHN1cGVyLXVzZXIgcHJpdmlsZWdlLCB0aGF0Cit0aGUgdGVtcGVyYXR1cmVzIGFyZSBub3Qg
cmVwb3J0ZWQgYnkgc3RhbmRhcmQgdG9vbHMgc3VjaCBhcyAnc2Vuc29ycycKK29yICdsaWJzZW5z
b3JzJywgYW5kIHRoYXQgZHJpdmUgdGVtcGVyYXR1cmVzIGFyZSBub3QgYXZhaWxhYmxlIGZvciB1
c2UKK2luIHRoZSBrZXJuZWwncyB0aGVybWFsIHN1YnN5c3RlbS4KKworVGhpcyBkcml2ZXIgc29s
dmVzIHRoaXMgcHJvYmxlbSBieSBhZGRpbmcgc3VwcG9ydCBmb3IgcmVhZGluZyB0aGUKK3RlbXBl
cmF0dXJlIG9mIEFUQSBkcml2ZXMgZnJvbSB0aGUga2VybmVsIHVzaW5nIHRoZSBod21vbiBBUEkg
YW5kCitieSBhZGRpbmcgYSB0ZW1wZXJhdHVyZSB6b25lIGZvciBlYWNoIGRyaXZlLgorCitXaXRo
IHRoaXMgZHJpdmVyLCB0aGUgaGFyZCBkaXNrIHRlbXBlcmF0dXJlIGNhbiBiZSByZWFkIHVzaW5n
IHRoZQordW5wcml2aWxlZ2VkICdzZW5zb3JzJyBhcHBsaWNhdGlvbjoKKworJCBzZW5zb3JzIGRy
aXZldGVtcC1zY3NpLTEtMAorZHJpdmV0ZW1wLXNjc2ktMS0wCitBZGFwdGVyOiBTQ1NJIGFkYXB0
ZXIKK3RlbXAxOiAgICAgICAgKzIzLjDCsEMKKworb3IgZGlyZWN0bHkgZnJvbSBzeXNmczoKKwor
JCBncmVwIC4gL3N5cy9jbGFzcy9od21vbi9od21vbjkve25hbWUsdGVtcDFfaW5wdXR9Cisvc3lz
L2NsYXNzL2h3bW9uL2h3bW9uOS9uYW1lOmRyaXZldGVtcAorL3N5cy9jbGFzcy9od21vbi9od21v
bjkvdGVtcDFfaW5wdXQ6MjMwMDAKKworSWYgdGhlIGRyaXZlIHN1cHBvcnRzIFNDVCB0cmFuc3Bv
cnQgYW5kIHJlcG9ydHMgdGVtcGVyYXR1cmUgbGltaXRzLAordGhvc2UgYXJlIHJlcG9ydGVkIGFz
IHdlbGwuCisKK2RyaXZldGVtcC1zY3NpLTAtMAorQWRhcHRlcjogU0NTSSBhZGFwdGVyCit0ZW1w
MTogICAgICAgICsyNy4wwrBDICAobG93ICA9ICArMC4wwrBDLCBoaWdoID0gKzYwLjDCsEMpCisg
ICAgICAgICAgICAgICAgICAgICAgIChjcml0IGxvdyA9IC00MS4wwrBDLCBjcml0ID0gKzg1LjDC
sEMpCisgICAgICAgICAgICAgICAgICAgICAgIChsb3dlc3QgPSArMjMuMMKwQywgaGlnaGVzdCA9
ICszNC4wwrBDKQorCitUaGUgZHJpdmVyIGF0dGVtcHRzIHRvIHVzZSBTQ1QgQ29tbWFuZCBUcmFu
c3BvcnQgdG8gcmVhZCB0aGUgZHJpdmUKK3RlbXBlcmF0dXJlLiBJZiB0aGUgU0NUIENvbW1hbmQg
VHJhbnNwb3J0IGZlYXR1cmUgc2V0IGlzIG5vdCBhdmFpbGFibGUsCitvciBpZiBpdCBkb2VzIG5v
dCByZXBvcnQgdGhlIGRyaXZlIHRlbXBlcmF0dXJlLCBkcml2ZSB0ZW1wZXJhdHVyZXMgbWF5Citi
ZSByZWFkYWJsZSB0aHJvdWdoIFNNQVJUIGF0dHJpYnV0ZXMuIFNpbmNlIFNNQVJUIGF0dHJpYnV0
ZXMgYXJlIG5vdCB3ZWxsCitkZWZpbmVkLCB0aGlzIG1ldGhvZCBpcyBvbmx5IHVzZWQgYXMgZmFs
bGJhY2sgbWVjaGFuaXNtLgorCitDYzogQ2hyaXMgSGVhbHkgPGNwaGVhbHlAZ21haWwuY29tPgor
Q2M6IExpbnVzIFdhbGxlaWogPGxpbnVzLndhbGxlaWpAbGluYXJvLm9yZz4KK0NjOiBNYXJ0aW4g
Sy4gUGV0ZXJzZW4gPG1hcnRpbi5wZXRlcnNlbkBvcmFjbGUuY29tPgorQ2M6IEJhcnQgVmFuIEFz
c2NoZSA8YnZhbmFzc2NoZUBhY20ub3JnPgorUmV2aWV3ZWQtYnk6IExpbnVzIFdhbGxlaWogPGxp
bnVzLndhbGxlaWpAbGluYXJvLm9yZz4KK1Rlc3RlZC1ieTogTGludXMgV2FsbGVpaiA8bGludXMu
d2FsbGVpakBsaW5hcm8ub3JnPgorU2lnbmVkLW9mZi1ieTogR3VlbnRlciBSb2VjayA8bGludXhA
cm9lY2stdXMubmV0PgorLS0tCisgRG9jdW1lbnRhdGlvbi9od21vbi9kcml2ZXRlbXAucnN0IHwg
IDUyICsrKworIERvY3VtZW50YXRpb24vaHdtb24vaW5kZXgucnN0ICAgICB8ICAgMSArCisgZHJp
dmVycy9od21vbi9LY29uZmlnICAgICAgICAgICAgIHwgIDEwICsKKyBkcml2ZXJzL2h3bW9uL01h
a2VmaWxlICAgICAgICAgICAgfCAgIDEgKworIGRyaXZlcnMvaHdtb24vZHJpdmV0ZW1wLmMgICAg
ICAgICB8IDU3NCArKysrKysrKysrKysrKysrKysrKysrKysrKysrKysKKyA1IGZpbGVzIGNoYW5n
ZWQsIDYzOCBpbnNlcnRpb25zKCspCisgY3JlYXRlIG1vZGUgMTAwNjQ0IERvY3VtZW50YXRpb24v
aHdtb24vZHJpdmV0ZW1wLnJzdAorIGNyZWF0ZSBtb2RlIDEwMDY0NCBkcml2ZXJzL2h3bW9uL2Ry
aXZldGVtcC5jCisKKy0tLSAvZGV2L251bGwKKysrKyBiL0RvY3VtZW50YXRpb24vaHdtb24vZHJp
dmV0ZW1wLnJzdAorQEAgLTAsMCArMSw1MiBAQAorKy4uIFNQRFgtTGljZW5zZS1JZGVudGlmaWVy
OiBHUEwtMi4wCisrCisrS2VybmVsIGRyaXZlciBkcml2ZXRlbXAKKys9PT09PT09PT09PT09PT09
PT09PT09PQorKworKworK1JlZmVyZW5jZXMKKystLS0tLS0tLS0tCisrCisrQU5TIFQxMy8xNjk5
LUQKKytJbmZvcm1hdGlvbiB0ZWNobm9sb2d5IC0gQVQgQXR0YWNobWVudCA4IC0gQVRBL0FUQVBJ
IENvbW1hbmQgU2V0IChBVEE4LUFDUykKKysKKytBTlMgUHJvamVjdCBUMTAvQlNSIElOQ0lUUyA1
MTMKKytJbmZvcm1hdGlvbiB0ZWNobm9sb2d5IC0gU0NTSSBQcmltYXJ5IENvbW1hbmRzIC0gNCAo
U1BDLTQpCisrCisrQU5TIFByb2plY3QgSU5DSVRTIDU1NworK0luZm9ybWF0aW9uIHRlY2hub2xv
Z3kgLSBTQ1NJIC8gQVRBIFRyYW5zbGF0aW9uIC0gNSAoU0FULTUpCisrCisrCisrRGVzY3JpcHRp
b24KKystLS0tLS0tLS0tLQorKworK1RoaXMgZHJpdmVyIHN1cHBvcnRzIHJlcG9ydGluZyB0aGUg
dGVtcGVyYXR1cmUgb2YgZGlzayBhbmQgc29saWQgc3RhdGUKKytkcml2ZXMgd2l0aCB0ZW1wZXJh
dHVyZSBzZW5zb3JzLgorKworK0lmIHN1cHBvcnRlZCwgaXQgdXNlcyB0aGUgQVRBIFNDVCBDb21t
YW5kIFRyYW5zcG9ydCBmZWF0dXJlIHRvIHJlYWQKKyt0aGUgY3VycmVudCBkcml2ZSB0ZW1wZXJh
dHVyZSBhbmQsIGlmIGF2YWlsYWJsZSwgdGVtcGVyYXR1cmUgbGltaXRzCisrYXMgd2VsbCBhcyBo
aXN0b3JpYyBtaW5pbXVtIGFuZCBtYXhpbXVtIHRlbXBlcmF0dXJlcy4gSWYgU0NUIENvbW1hbmQK
KytUcmFuc3BvcnQgaXMgbm90IHN1cHBvcnRlZCwgdGhlIGRyaXZlciB1c2VzIFNNQVJUIGF0dHJp
YnV0ZXMgdG8gcmVhZAorK3RoZSBkcml2ZSB0ZW1wZXJhdHVyZS4KKysKKysKKytTeXNmcyBlbnRy
aWVzCisrLS0tLS0tLS0tLS0tLQorKworK09ubHkgdGhlIHRlbXAxX2lucHV0IGF0dHJpYnV0ZSBp
cyBhbHdheXMgYXZhaWxhYmxlLiBPdGhlciBhdHRyaWJ1dGVzIGFyZQorK2F2YWlsYWJsZSBvbmx5
IGlmIHJlcG9ydGVkIGJ5IHRoZSBkcml2ZS4gQWxsIHRlbXBlcmF0dXJlcyBhcmUgcmVwb3J0ZWQg
aW4KKyttaWxsaS1kZWdyZWVzIENlbHNpdXMuCisrCisrPT09PT09PT09PT09PT09PT09PT09PT0J
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KKyt0
ZW1wMV9pbnB1dAkJQ3VycmVudCBkcml2ZSB0ZW1wZXJhdHVyZQorK3RlbXAxX2xjcml0CQlNaW5p
bXVtIHRlbXBlcmF0dXJlIGxpbWl0LiBPcGVyYXRpbmcgdGhlIGRldmljZSBiZWxvdworKwkJCXRo
aXMgdGVtcGVyYXR1cmUgbWF5IGNhdXNlIHBoeXNpY2FsIGRhbWFnZSB0byB0aGUKKysJCQlkZXZp
Y2UuCisrdGVtcDFfbWluCQlNaW5pbXVtIHJlY29tbWVuZGVkIGNvbnRpbnVvdXMgb3BlcmF0aW5n
IGxpbWl0CisrdGVtcDFfbWF4CQlNYXhpbXVtIHJlY29tbWVuZGVkIGNvbnRpbnVvdXMgb3BlcmF0
aW5nIHRlbXBlcmF0dXJlCisrdGVtcDFfY3JpdAkJTWF4aW11bSB0ZW1wZXJhdHVyZSBsaW1pdC4g
T3BlcmF0aW5nIHRoZSBkZXZpY2UgYWJvdmUKKysJCQl0aGlzIHRlbXBlcmF0dXJlIG1heSBjYXVz
ZSBwaHlzaWNhbCBkYW1hZ2UgdG8gdGhlCisrCQkJZGV2aWNlLgorK3RlbXAxX2xvd2VzdAkJTWlu
aW11bSB0ZW1wZXJhdHVyZSBzZWVuIHRoaXMgcG93ZXIgY3ljbGUKKyt0ZW1wMV9oaWdoZXN0CQlN
YXhpbXVtIHRlbXBlcmF0dXJlIHNlZW4gdGhpcyBwb3dlciBjeWNsZQorKz09PT09PT09PT09PT09
PT09PT09PT09CT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09CistLS0gYS9Eb2N1bWVudGF0aW9uL2h3bW9uL2luZGV4LnJzdAorKysrIGIvRG9jdW1l
bnRhdGlvbi9od21vbi9pbmRleC5yc3QKK0BAIC00NSw2ICs0NSw3IEBAIEhhcmR3YXJlIE1vbml0
b3JpbmcgS2VybmVsIERyaXZlcnMKKyAgICBkYTkwNTIKKyAgICBkYTkwNTUKKyAgICBkbWUxNzM3
CisrICAgZHJpdmV0ZW1wCisgICAgZHMxNjIxCisgICAgZHM2MjAKKyAgICBlbWMxNDAzCistLS0g
YS9kcml2ZXJzL2h3bW9uL0tjb25maWcKKysrKyBiL2RyaXZlcnMvaHdtb24vS2NvbmZpZworQEAg
LTM4NSw2ICszODUsMTYgQEAgY29uZmlnIFNFTlNPUlNfQVRYUDEKKyAJICBUaGlzIGRyaXZlciBj
YW4gYWxzbyBiZSBidWlsdCBhcyBhIG1vZHVsZS4gSWYgc28sIHRoZSBtb2R1bGUKKyAJICB3aWxs
IGJlIGNhbGxlZCBhdHhwMS4KKyAKKytjb25maWcgU0VOU09SU19EUklWRVRFTVAKKysJdHJpc3Rh
dGUgIkhhcmQgZGlzayBkcml2ZXMgd2l0aCB0ZW1wZXJhdHVyZSBzZW5zb3JzIgorKwlkZXBlbmRz
IG9uIFNDU0kgJiYgQVRBCisrCWhlbHAKKysJICBJZiB5b3Ugc2F5IHllcyB5b3UgZ2V0IHN1cHBv
cnQgZm9yIHRoZSB0ZW1wZXJhdHVyZSBzZW5zb3Igb24KKysJICBoYXJkIGRpc2sgZHJpdmVzLgor
KworKwkgIFRoaXMgZHJpdmVyIGNhbiBhbHNvIGJlIGJ1aWx0IGFzIGEgbW9kdWxlLiBJZiBzbywg
dGhlIG1vZHVsZQorKwkgIHdpbGwgYmUgY2FsbGVkIHNhdGF0ZW1wLgorKworIGNvbmZpZyBTRU5T
T1JTX0RTNjIwCisgCXRyaXN0YXRlICJEYWxsYXMgU2VtaWNvbmR1Y3RvciBEUzYyMCIKKyAJZGVw
ZW5kcyBvbiBJMkMKKy0tLSBhL2RyaXZlcnMvaHdtb24vTWFrZWZpbGUKKysrKyBiL2RyaXZlcnMv
aHdtb24vTWFrZWZpbGUKK0BAIC01Niw2ICs1Niw3IEBAIG9iai0kKENPTkZJR19TRU5TT1JTX0RB
OTA1Ml9BREMpKz0gZGE5MDUKKyBvYmotJChDT05GSUdfU0VOU09SU19EQTkwNTUpKz0gZGE5MDU1
LWh3bW9uLm8KKyBvYmotJChDT05GSUdfU0VOU09SU19ERUxMX1NNTSkJKz0gZGVsbC1zbW0taHdt
b24ubworIG9iai0kKENPTkZJR19TRU5TT1JTX0RNRTE3MzcpCSs9IGRtZTE3MzcubworK29iai0k
KENPTkZJR19TRU5TT1JTX0RSSVZFVEVNUCkJKz0gZHJpdmV0ZW1wLm8KKyBvYmotJChDT05GSUdf
U0VOU09SU19EUzYyMCkJKz0gZHM2MjAubworIG9iai0kKENPTkZJR19TRU5TT1JTX0RTMTYyMSkJ
Kz0gZHMxNjIxLm8KKyBvYmotJChDT05GSUdfU0VOU09SU19FTUMxNDAzKQkrPSBlbWMxNDAzLm8K
Ky0tLSAvZGV2L251bGwKKysrKyBiL2RyaXZlcnMvaHdtb24vZHJpdmV0ZW1wLmMKK0BAIC0wLDAg
KzEsNTc0IEBACisrLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEdQTC0yLjAKKysvKgorKyAq
IEh3bW9uIGNsaWVudCBmb3IgZGlzayBhbmQgc29saWQgc3RhdGUgZHJpdmVzIHdpdGggdGVtcGVy
YXR1cmUgc2Vuc29ycworKyAqIENvcHlyaWdodCAoQykgMjAxOSBab2RpYWMgSW5mbGlnaHQgSW5u
b3ZhdGlvbnMKKysgKgorKyAqIFdpdGggaW5wdXQgZnJvbToKKysgKiAgICBId21vbiBjbGllbnQg
Zm9yIFMuTS5BLlIuVC4gaGFyZCBkaXNrIGRyaXZlcyB3aXRoIHRlbXBlcmF0dXJlIHNlbnNvcnMu
CisrICogICAgKEMpIDIwMTggTGludXMgV2FsbGVpagorKyAqCisrICogICAgaHdtb246IERyaXZl
ciBmb3IgU0NTSS9BVEEgdGVtcGVyYXR1cmUgc2Vuc29ycworKyAqICAgIGJ5IENvbnN0YW50aW4g
QmFyYW5vdiA8Y29uc3RAbWltYXMucnU+LCBzdWJtaXR0ZWQgU2VwdGVtYmVyIDIwMDkKKysgKgor
KyAqIFRoaXMgZHJpdmUgc3VwcG9ydHMgcmVwb3J0aW5nIHRoZSB0ZW1wZXJhdGlyZSBvZiBTQVRB
IGRyaXZlcy4gSXQgY2FuIGJlCisrICogZWFzaWx5IGV4dGVuZGVkIHRvIHJlcG9ydCB0aGUgdGVt
cGVyYXR1cmUgb2YgU0NTSSBkcml2ZXMuCisrICoKKysgKiBUaGUgcHJpbWFyeSBtZWFucyB0byBy
ZWFkIGRyaXZlIHRlbXBlcmF0dXJlcyBhbmQgdGVtcGVyYXR1cmUgbGltaXRzCisrICogZm9yIEFU
QSBkcml2ZXMgaXMgdGhlIFNDVCBDb21tYW5kIFRyYW5zcG9ydCBmZWF0dXJlIHNldCBhcyBzcGVj
aWZpZWQgaW4KKysgKiBBVEE4LUFDUy4KKysgKiBJdCBjYW4gYmUgdXNlZCB0byByZWFkIHRoZSBj
dXJyZW50IGRyaXZlIHRlbXBlcmF0dXJlLCB0ZW1wZXJhdHVyZSBsaW1pdHMsCisrICogYW5kIGhp
c3RvcmljIG1pbmltdW0gYW5kIG1heGltdW0gdGVtcGVyYXR1cmVzLiBUaGUgU0NUIENvbW1hbmQg
VHJhbnNwb3J0CisrICogZmVhdHVyZSBzZXQgaXMgZG9jdW1lbnRlZCBpbiAiQVQgQXR0YWNobWVu
dCA4IC0gQVRBL0FUQVBJIENvbW1hbmQgU2V0CisrICogKEFUQTgtQUNTKSIuCisrICoKKysgKiBJ
ZiB0aGUgU0NUIENvbW1hbmQgVHJhbnNwb3J0IGZlYXR1cmUgc2V0IGlzIG5vdCBhdmFpbGFibGUs
IGRyaXZlIHRlbXBlcmF0dXJlcworKyAqIG1heSBiZSByZWFkYWJsZSB0aHJvdWdoIFNNQVJUIGF0
dHJpYnV0ZXMuIFNpbmNlIFNNQVJUIGF0dHJpYnV0ZXMgYXJlIG5vdCB3ZWxsCisrICogZGVmaW5l
ZCwgdGhpcyBtZXRob2QgaXMgb25seSB1c2VkIGFzIGZhbGxiYWNrIG1lY2hhbmlzbS4KKysgKgor
KyAqIFRoZXJlIGFyZSB0aHJlZSBTTUFSVCBhdHRyaWJ1dGVzIHdoaWNoIG1heSByZXBvcnQgZHJp
dmUgdGVtcGVyYXR1cmVzLgorKyAqIFRob3NlIGFyZSBkZWZpbmVkIGFzIGZvbGxvd3MgKGZyb20K
KysgKiBodHRwOi8vd3d3LmNyb3BlbC5jb20vbGlicmFyeS9zbWFydC1hdHRyaWJ1dGUtbGlzdC5h
c3B4KS4KKysgKgorKyAqIDE5MAlUZW1wZXJhdHVyZQlUZW1wZXJhdHVyZSwgbW9uaXRvcmVkIGJ5
IGEgc2Vuc29yIHNvbWV3aGVyZSBpbnNpZGUKKysgKgkJCXRoZSBkcml2ZS4gUmF3IHZhbHVlIHR5
cGljYWx5IGhvbGRzIHRoZSBhY3R1YWwKKysgKgkJCXRlbXBlcmF0dXJlIChoZXhhZGVjaW1hbCkg
aW4gaXRzIHJpZ2h0bW9zdCB0d28gZGlnaXRzLgorKyAqCisrICogMTk0CVRlbXBlcmF0dXJlCVRl
bXBlcmF0dXJlLCBtb25pdG9yZWQgYnkgYSBzZW5zb3Igc29tZXdoZXJlIGluc2lkZQorKyAqCQkJ
dGhlIGRyaXZlLiBSYXcgdmFsdWUgdHlwaWNhbHkgaG9sZHMgdGhlIGFjdHVhbAorKyAqCQkJdGVt
cGVyYXR1cmUgKGhleGFkZWNpbWFsKSBpbiBpdHMgcmlnaHRtb3N0IHR3byBkaWdpdHMuCisrICoK
KysgKiAyMzEJVGVtcGVyYXR1cmUJVGVtcGVyYXR1cmUsIG1vbml0b3JlZCBieSBhIHNlbnNvciBz
b21ld2hlcmUgaW5zaWRlCisrICoJCQl0aGUgZHJpdmUuIFJhdyB2YWx1ZSB0eXBpY2FseSBob2xk
cyB0aGUgYWN0dWFsCisrICoJCQl0ZW1wZXJhdHVyZSAoaGV4YWRlY2ltYWwpIGluIGl0cyByaWdo
dG1vc3QgdHdvIGRpZ2l0cy4KKysgKgorKyAqIFdpa2lwZWRpYSBkZWZpbmVzIGF0dHJpYnV0ZXMg
YSBiaXQgZGlmZmVyZW50bHkuCisrICoKKysgKiAxOTAJVGVtcGVyYXR1cmUJVmFsdWUgaXMgZXF1
YWwgdG8gKDEwMC10ZW1wLiDCsEMpLCBhbGxvd2luZyBtYW51ZmFjdHVyZXIKKysgKglEaWZmZXJl
bmNlIG9yCXRvIHNldCBhIG1pbmltdW0gdGhyZXNob2xkIHdoaWNoIGNvcnJlc3BvbmRzIHRvIGEK
KysgKglBaXJmbG93CQltYXhpbXVtIHRlbXBlcmF0dXJlLiBUaGlzIGFsc28gZm9sbG93cyB0aGUg
Y29udmVudGlvbiBvZgorKyAqCVRlbXBlcmF0dXJlCTEwMCBiZWluZyBhIGJlc3QtY2FzZSB2YWx1
ZSBhbmQgbG93ZXIgdmFsdWVzIGJlaW5nCisrICoJCQl1bmRlc2lyYWJsZS4gSG93ZXZlciwgc29t
ZSBvbGRlciBkcml2ZXMgbWF5IGluc3RlYWQKKysgKgkJCXJlcG9ydCByYXcgVGVtcGVyYXR1cmUg
KGlkZW50aWNhbCB0byAweEMyKSBvcgorKyAqCQkJVGVtcGVyYXR1cmUgbWludXMgNTAgaGVyZS4K
KysgKiAxOTQJVGVtcGVyYXR1cmUgb3IJSW5kaWNhdGVzIHRoZSBkZXZpY2UgdGVtcGVyYXR1cmUs
IGlmIHRoZSBhcHByb3ByaWF0ZQorKyAqCVRlbXBlcmF0dXJlCXNlbnNvciBpcyBmaXR0ZWQuIExv
d2VzdCBieXRlIG9mIHRoZSByYXcgdmFsdWUgY29udGFpbnMKKysgKglDZWxzaXVzCQl0aGUgZXhh
Y3QgdGVtcGVyYXR1cmUgdmFsdWUgKENlbHNpdXMgZGVncmVlcykuCisrICogMjMxCUxpZmUgTGVm
dAlJbmRpY2F0ZXMgdGhlIGFwcHJveGltYXRlIFNTRCBsaWZlIGxlZnQsIGluIHRlcm1zIG9mCisr
ICoJKFNTRHMpIG9yCXByb2dyYW0vZXJhc2UgY3ljbGVzIG9yIGF2YWlsYWJsZSByZXNlcnZlZCBi
bG9ja3MuCisrICoJVGVtcGVyYXR1cmUJQSBub3JtYWxpemVkIHZhbHVlIG9mIDEwMCByZXByZXNl
bnRzIGEgbmV3IGRyaXZlLCB3aXRoCisrICoJCQlhIHRocmVzaG9sZCB2YWx1ZSBhdCAxMCBpbmRp
Y2F0aW5nIGEgbmVlZCBmb3IKKysgKgkJCXJlcGxhY2VtZW50LiBBIHZhbHVlIG9mIDAgbWF5IG1l
YW4gdGhhdCB0aGUgZHJpdmUgaXMKKysgKgkJCW9wZXJhdGluZyBpbiByZWFkLW9ubHkgbW9kZSB0
byBhbGxvdyBkYXRhIHJlY292ZXJ5LgorKyAqCQkJUHJldmlvdXNseSAocHJlLTIwMTApIG9jY2Fz
aW9uYWxseSB1c2VkIGZvciBEcml2ZQorKyAqCQkJVGVtcGVyYXR1cmUgKG1vcmUgdHlwaWNhbGx5
IHJlcG9ydGVkIGF0IDB4QzIpLgorKyAqCisrICogQ29tbW9uIGRlbm9taW5hdG9yIGlzIHRoYXQg
dGhlIGZpcnN0IHJhdyBieXRlIHJlcG9ydHMgdGhlIHRlbXBlcmF0dXJlCisrICogaW4gZGVncmVl
cyBDIG9uIGFsbW9zdCBhbGwgZHJpdmVzLiBTb21lIGRyaXZlcyBtYXkgcmVwb3J0IGEgZnJhY3Rp
b25hbAorKyAqIHRlbXBlcmF0dXJlIGluIHRoZSBzZWNvbmQgcmF3IGJ5dGUuCisrICoKKysgKiBL
bm93biBleGNlcHRpb25zIChmcm9tIGxpYmF0YXNtYXJ0KToKKysgKiAtIFNBTVNVTkcgU1YwNDEy
SCBhbmQgU0FNU1VORyBTVjEyMDRIKSByZXBvcnQgdGhlIHRlbXBlcmF0dXJlIGluIDEwdGgKKysg
KiAgIGRlZ3JlZXMgQyBpbiB0aGUgZmlyc3QgdHdvIHJhdyBieXRlcy4KKysgKiAtIEEgZmV3IE1h
eHRvciBkcml2ZXMgcmVwb3J0IGFuIHVua25vd24gb3IgYmFkIHZhbHVlIGluIGF0dHJpYnV0ZSAx
OTQuCisrICogLSBDZXJ0YWluIEFwcGxlIFNTRCBkcml2ZXMgcmVwb3J0IGFuIHVua25vd24gdmFs
dWUgaW4gYXR0cmlidXRlIDE5MC4KKysgKiAgIE9ubHkgY2VydGFpbiBmaXJtd2FyZSB2ZXJzaW9u
cyBhcmUgYWZmZWN0ZWQuCisrICoKKysgKiBUaG9zZSBleGNlcHRpb25zIGFmZmVjdCBvbGRlciBB
VEEgZHJpdmVzIGFuZCBhcmUgY3VycmVudGx5IGlnbm9yZWQuCisrICogQWxzbywgdGhlIHNlY29u
ZCByYXcgYnl0ZSAocG9zc2libHkgcmVwb3J0aW5nIHRoZSBmcmFjdGlvbmFsIHRlbXBlcmF0dXJl
KQorKyAqIGlzIGN1cnJlbnRseSBpZ25vcmVkLgorKyAqCisrICogTWFueSBkcml2ZXMgYWxzbyBy
ZXBvcnQgdGVtcGVyYXR1cmUgbGltaXRzIGluIGFkZGl0aW9uYWwgU01BUlQgZGF0YSByYXcKKysg
KiBieXRlcy4gVGhlIGZvcm1hdCBvZiB0aG9zZSBpcyBub3Qgd2VsbCBkZWZpbmVkIGFuZCB2YXJp
ZXMgd2lkZWx5LgorKyAqIFRoZSBkcml2ZXIgZG9lcyBub3QgY3VycmVudGx5IGF0dGVtcHQgdG8g
cmVwb3J0IHRob3NlIGxpbWl0cy4KKysgKgorKyAqIEFjY29yZGluZyB0byBkYXRhIGluIHNtYXJ0
bW9udG9vbHMsIGF0dHJpYnV0ZSAyMzEgaXMgcmFyZWx5IHVzZWQgdG8gcmVwb3J0CisrICogZHJp
dmUgdGVtcGVyYXR1cmVzLiBBdCB0aGUgc2FtZSB0aW1lLCBzZXZlcmFsIGRyaXZlcyByZXBvcnQg
U1NEIGxpZmUgbGVmdAorKyAqIGluIGF0dHJpYnV0ZSAyMzEsIGJ1dCBkbyBub3Qgc3VwcG9ydCB0
ZW1wZXJhdHVyZSBzZW5zb3JzLiBGb3IgdGhpcyByZWFzb24sCisrICogYXR0cmlidXRlIDIzMSBp
cyBjdXJyZW50bHkgaWdub3JlZC4KKysgKgorKyAqIEZvbGxvd2luZyBhYm92ZSBkZWZpbml0aW9u
cywgdGVtcGVyYXR1cmVzIGFyZSByZXBvcnRlZCBhcyBmb2xsb3dzLgorKyAqICAgSWYgU0NUIENv
bW1hbmQgVHJhbnNwb3J0IGlzIHN1cHBvcnRlZCwgaXQgaXMgdXNlZCB0byByZWFkIHRoZQorKyAq
ICAgdGVtcGVyYXR1cmUgYW5kLCBpZiBhdmFpbGFibGUsIHRlbXBlcmF0dXJlIGxpbWl0cy4KKysg
KiAtIE90aGVyd2lzZSwgaWYgU01BUlQgYXR0cmlidXRlIDE5NCBpcyBzdXBwb3J0ZWQsIGl0IGlz
IHVzZWQgdG8gcmVhZAorKyAqICAgdGhlIHRlbXBlcmF0dXJlLgorKyAqIC0gT3RoZXJ3aXNlLCBp
ZiBTTUFSVCBhdHRyaWJ1dGUgMTkwIGlzIHN1cHBvcnRlZCwgaXQgaXMgdXNlZCB0byByZWFkCisr
ICogICB0aGUgdGVtcGVyYXR1cmUuCisrICovCisrCisrI2luY2x1ZGUgPGxpbnV4L2F0YS5oPgor
KyNpbmNsdWRlIDxsaW51eC9iaXRzLmg+CisrI2luY2x1ZGUgPGxpbnV4L2RldmljZS5oPgorKyNp
bmNsdWRlIDxsaW51eC9od21vbi5oPgorKyNpbmNsdWRlIDxsaW51eC9rZXJuZWwuaD4KKysjaW5j
bHVkZSA8bGludXgvbGlzdC5oPgorKyNpbmNsdWRlIDxsaW51eC9tb2R1bGUuaD4KKysjaW5jbHVk
ZSA8bGludXgvbXV0ZXguaD4KKysjaW5jbHVkZSA8c2NzaS9zY3NpX2NtbmQuaD4KKysjaW5jbHVk
ZSA8c2NzaS9zY3NpX2RldmljZS5oPgorKyNpbmNsdWRlIDxzY3NpL3Njc2lfZHJpdmVyLmg+Cisr
I2luY2x1ZGUgPHNjc2kvc2NzaV9wcm90by5oPgorKworK3N0cnVjdCBkcml2ZXRlbXBfZGF0YSB7
CisrCXN0cnVjdCBsaXN0X2hlYWQgbGlzdDsJCS8qIGxpc3Qgb2YgaW5zdGFudGlhdGVkIGRldmlj
ZXMgKi8KKysJc3RydWN0IG11dGV4IGxvY2s7CQkvKiBwcm90ZWN0IGRhdGEgYnVmZmVyIGFjY2Vz
c2VzICovCisrCXN0cnVjdCBzY3NpX2RldmljZSAqc2RldjsJLyogU0NTSSBkZXZpY2UgKi8KKysJ
c3RydWN0IGRldmljZSAqZGV2OwkJLyogaW5zdGFudGlhdGluZyBkZXZpY2UgKi8KKysJc3RydWN0
IGRldmljZSAqaHdkZXY7CQkvKiBoYXJkd2FyZSBtb25pdG9yaW5nIGRldmljZSAqLworKwl1OCBz
bWFydGRhdGFbQVRBX1NFQ1RfU0laRV07CS8qIGxvY2FsIGJ1ZmZlciAqLworKwlpbnQgKCpnZXRf
dGVtcCkoc3RydWN0IGRyaXZldGVtcF9kYXRhICpzdCwgdTMyIGF0dHIsIGxvbmcgKnZhbCk7Cisr
CWJvb2wgaGF2ZV90ZW1wX2xvd2VzdDsJCS8qIGxvd2VzdCB0ZW1wIGluIFNDVCBzdGF0dXMgKi8K
KysJYm9vbCBoYXZlX3RlbXBfaGlnaGVzdDsJCS8qIGhpZ2hlc3QgdGVtcCBpbiBTQ1Qgc3RhdHVz
ICovCisrCWJvb2wgaGF2ZV90ZW1wX21pbjsJCS8qIGhhdmUgbWluIHRlbXAgKi8KKysJYm9vbCBo
YXZlX3RlbXBfbWF4OwkJLyogaGF2ZSBtYXggdGVtcCAqLworKwlib29sIGhhdmVfdGVtcF9sY3Jp
dDsJCS8qIGhhdmUgbG93ZXIgY3JpdGljYWwgbGltaXQgKi8KKysJYm9vbCBoYXZlX3RlbXBfY3Jp
dDsJCS8qIGhhdmUgY3JpdGljYWwgbGltaXQgKi8KKysJaW50IHRlbXBfbWluOwkJCS8qIG1pbiB0
ZW1wICovCisrCWludCB0ZW1wX21heDsJCQkvKiBtYXggdGVtcCAqLworKwlpbnQgdGVtcF9sY3Jp
dDsJCQkvKiBsb3dlciBjcml0aWNhbCBsaW1pdCAqLworKwlpbnQgdGVtcF9jcml0OwkJCS8qIGNy
aXRpY2FsIGxpbWl0ICovCisrfTsKKysKKytzdGF0aWMgTElTVF9IRUFEKGRyaXZldGVtcF9kZXZs
aXN0KTsKKysKKysjZGVmaW5lIEFUQV9NQVhfU01BUlRfQVRUUlMJMzAKKysjZGVmaW5lIFNNQVJU
X1RFTVBfUFJPUF8xOTAJMTkwCisrI2RlZmluZSBTTUFSVF9URU1QX1BST1BfMTk0CTE5NAorKwor
KyNkZWZpbmUgU0NUX1NUQVRVU19SRVFfQUREUgkweGUwCisrI2RlZmluZSAgU0NUX1NUQVRVU19W
RVJTSU9OX0xPVwkJMAkvKiBsb2cgYnl0ZSBvZmZzZXRzICovCisrI2RlZmluZSAgU0NUX1NUQVRV
U19WRVJTSU9OX0hJR0gJMQorKyNkZWZpbmUgIFNDVF9TVEFUVVNfVEVNUAkJMjAwCisrI2RlZmlu
ZSAgU0NUX1NUQVRVU19URU1QX0xPV0VTVAkJMjAxCisrI2RlZmluZSAgU0NUX1NUQVRVU19URU1Q
X0hJR0hFU1QJMjAyCisrI2RlZmluZSBTQ1RfUkVBRF9MT0dfQUREUgkweGUxCisrI2RlZmluZSAg
U01BUlRfUkVBRF9MT0cJCQkweGQ1CisrI2RlZmluZSAgU01BUlRfV1JJVEVfTE9HCQkweGQ2Cisr
CisrI2RlZmluZSBJTlZBTElEX1RFTVAJCTB4ODAKKysKKysjZGVmaW5lIHRlbXBfaXNfdmFsaWQo
dGVtcCkJKCh0ZW1wKSAhPSBJTlZBTElEX1RFTVApCisrI2RlZmluZSB0ZW1wX2Zyb21fc2N0KHRl
bXApCSgoKHM4KSh0ZW1wKSkgKiAxMDAwKQorKworK3N0YXRpYyBpbmxpbmUgYm9vbCBhdGFfaWRf
c21hcnRfc3VwcG9ydGVkKHUxNiAqaWQpCisreworKwlyZXR1cm4gaWRbQVRBX0lEX0NPTU1BTkRf
U0VUXzFdICYgQklUKDApOworK30KKysKKytzdGF0aWMgaW5saW5lIGJvb2wgYXRhX2lkX3NtYXJ0
X2VuYWJsZWQodTE2ICppZCkKKyt7CisrCXJldHVybiBpZFtBVEFfSURfQ0ZTX0VOQUJMRV8xXSAm
IEJJVCgwKTsKKyt9CisrCisrc3RhdGljIGludCBkcml2ZXRlbXBfc2NzaV9jb21tYW5kKHN0cnVj
dCBkcml2ZXRlbXBfZGF0YSAqc3QsCisrCQkJCSB1OCBhdGFfY29tbWFuZCwgdTggZmVhdHVyZSwK
KysJCQkJIHU4IGxiYV9sb3csIHU4IGxiYV9taWQsIHU4IGxiYV9oaWdoKQorK3sKKysJdTggc2Nz
aV9jbWRbTUFYX0NPTU1BTkRfU0laRV07CisrCWludCBkYXRhX2RpcjsKKysKKysJbWVtc2V0KHNj
c2lfY21kLCAwLCBzaXplb2Yoc2NzaV9jbWQpKTsKKysJc2NzaV9jbWRbMF0gPSBBVEFfMTY7Cisr
CWlmIChhdGFfY29tbWFuZCA9PSBBVEFfQ01EX1NNQVJUICYmIGZlYXR1cmUgPT0gU01BUlRfV1JJ
VEVfTE9HKSB7CisrCQlzY3NpX2NtZFsxXSA9ICg1IDw8IDEpOwkvKiBQSU8gRGF0YS1vdXQgKi8K
KysJCS8qCisrCQkgKiBObyBvZmYubGluZSBvciBjYywgd3JpdGUgdG8gZGV2LCBibG9jayBjb3Vu
dCBpbiBzZWN0b3IgY291bnQKKysJCSAqIGZpZWxkLgorKwkJICovCisrCQlzY3NpX2NtZFsyXSA9
IDB4MDY7CisrCQlkYXRhX2RpciA9IERNQV9UT19ERVZJQ0U7CisrCX0gZWxzZSB7CisrCQlzY3Np
X2NtZFsxXSA9ICg0IDw8IDEpOwkvKiBQSU8gRGF0YS1pbiAqLworKwkJLyoKKysJCSAqIE5vIG9m
Zi5saW5lIG9yIGNjLCByZWFkIGZyb20gZGV2LCBibG9jayBjb3VudCBpbiBzZWN0b3IgY291bnQK
KysJCSAqIGZpZWxkLgorKwkJICovCisrCQlzY3NpX2NtZFsyXSA9IDB4MGU7CisrCQlkYXRhX2Rp
ciA9IERNQV9GUk9NX0RFVklDRTsKKysJfQorKwlzY3NpX2NtZFs0XSA9IGZlYXR1cmU7CisrCXNj
c2lfY21kWzZdID0gMTsJLyogMSBzZWN0b3IgKi8KKysJc2NzaV9jbWRbOF0gPSBsYmFfbG93Owor
KwlzY3NpX2NtZFsxMF0gPSBsYmFfbWlkOworKwlzY3NpX2NtZFsxMl0gPSBsYmFfaGlnaDsKKysJ
c2NzaV9jbWRbMTRdID0gYXRhX2NvbW1hbmQ7CisrCisrCXJldHVybiBzY3NpX2V4ZWN1dGVfcmVx
KHN0LT5zZGV2LCBzY3NpX2NtZCwgZGF0YV9kaXIsCisrCQkJCXN0LT5zbWFydGRhdGEsIEFUQV9T
RUNUX1NJWkUsIE5VTEwsIEhaLCA1LAorKwkJCQlOVUxMKTsKKyt9CisrCisrc3RhdGljIGludCBk
cml2ZXRlbXBfYXRhX2NvbW1hbmQoc3RydWN0IGRyaXZldGVtcF9kYXRhICpzdCwgdTggZmVhdHVy
ZSwKKysJCQkJIHU4IHNlbGVjdCkKKyt7CisrCXJldHVybiBkcml2ZXRlbXBfc2NzaV9jb21tYW5k
KHN0LCBBVEFfQ01EX1NNQVJULCBmZWF0dXJlLCBzZWxlY3QsCisrCQkJCSAgICAgQVRBX1NNQVJU
X0xCQU1fUEFTUywgQVRBX1NNQVJUX0xCQUhfUEFTUyk7CisrfQorKworK3N0YXRpYyBpbnQgZHJp
dmV0ZW1wX2dldF9zbWFydHRlbXAoc3RydWN0IGRyaXZldGVtcF9kYXRhICpzdCwgdTMyIGF0dHIs
CisrCQkJCSAgbG9uZyAqdGVtcCkKKyt7CisrCXU4ICpidWYgPSBzdC0+c21hcnRkYXRhOworKwli
b29sIGhhdmVfdGVtcCA9IGZhbHNlOworKwl1OCB0ZW1wX3JhdzsKKysJdTggY3N1bTsKKysJaW50
IGVycjsKKysJaW50IGk7CisrCisrCWVyciA9IGRyaXZldGVtcF9hdGFfY29tbWFuZChzdCwgQVRB
X1NNQVJUX1JFQURfVkFMVUVTLCAwKTsKKysJaWYgKGVycikKKysJCXJldHVybiBlcnI7CisrCisr
CS8qIENoZWNrc3VtIHRoZSByZWFkIHZhbHVlIHRhYmxlICovCisrCWNzdW0gPSAwOworKwlmb3Ig
KGkgPSAwOyBpIDwgQVRBX1NFQ1RfU0laRTsgaSsrKQorKwkJY3N1bSArPSBidWZbaV07CisrCWlm
IChjc3VtKSB7CisrCQlkZXZfZGJnKCZzdC0+c2Rldi0+c2Rldl9nZW5kZXYsCisrCQkJImNoZWNr
c3VtIGVycm9yIHJlYWRpbmcgU01BUlQgdmFsdWVzXG4iKTsKKysJCXJldHVybiAtRUlPOworKwl9
CisrCisrCWZvciAoaSA9IDA7IGkgPCBBVEFfTUFYX1NNQVJUX0FUVFJTOyBpKyspIHsKKysJCXU4
ICphdHRyID0gYnVmICsgaSAqIDEyOworKwkJaW50IGlkID0gYXR0clsyXTsKKysKKysJCWlmICgh
aWQpCisrCQkJY29udGludWU7CisrCisrCQlpZiAoaWQgPT0gU01BUlRfVEVNUF9QUk9QXzE5MCkg
eworKwkJCXRlbXBfcmF3ID0gYXR0cls3XTsKKysJCQloYXZlX3RlbXAgPSB0cnVlOworKwkJfQor
KwkJaWYgKGlkID09IFNNQVJUX1RFTVBfUFJPUF8xOTQpIHsKKysJCQl0ZW1wX3JhdyA9IGF0dHJb
N107CisrCQkJaGF2ZV90ZW1wID0gdHJ1ZTsKKysJCQlicmVhazsKKysJCX0KKysJfQorKworKwlp
ZiAoaGF2ZV90ZW1wKSB7CisrCQkqdGVtcCA9IHRlbXBfcmF3ICogMTAwMDsKKysJCXJldHVybiAw
OworKwl9CisrCisrCXJldHVybiAtRU5YSU87CisrfQorKworK3N0YXRpYyBpbnQgZHJpdmV0ZW1w
X2dldF9zY3R0ZW1wKHN0cnVjdCBkcml2ZXRlbXBfZGF0YSAqc3QsIHUzMiBhdHRyLCBsb25nICp2
YWwpCisreworKwl1OCAqYnVmID0gc3QtPnNtYXJ0ZGF0YTsKKysJaW50IGVycjsKKysKKysJZXJy
ID0gZHJpdmV0ZW1wX2F0YV9jb21tYW5kKHN0LCBTTUFSVF9SRUFEX0xPRywgU0NUX1NUQVRVU19S
RVFfQUREUik7CisrCWlmIChlcnIpCisrCQlyZXR1cm4gZXJyOworKwlzd2l0Y2ggKGF0dHIpIHsK
KysJY2FzZSBod21vbl90ZW1wX2lucHV0OgorKwkJKnZhbCA9IHRlbXBfZnJvbV9zY3QoYnVmW1ND
VF9TVEFUVVNfVEVNUF0pOworKwkJYnJlYWs7CisrCWNhc2UgaHdtb25fdGVtcF9sb3dlc3Q6Cisr
CQkqdmFsID0gdGVtcF9mcm9tX3NjdChidWZbU0NUX1NUQVRVU19URU1QX0xPV0VTVF0pOworKwkJ
YnJlYWs7CisrCWNhc2UgaHdtb25fdGVtcF9oaWdoZXN0OgorKwkJKnZhbCA9IHRlbXBfZnJvbV9z
Y3QoYnVmW1NDVF9TVEFUVVNfVEVNUF9ISUdIRVNUXSk7CisrCQlicmVhazsKKysJZGVmYXVsdDoK
KysJCWVyciA9IC1FSU5WQUw7CisrCQlicmVhazsKKysJfQorKwlyZXR1cm4gZXJyOworK30KKysK
KytzdGF0aWMgaW50IGRyaXZldGVtcF9pZGVudGlmeV9zYXRhKHN0cnVjdCBkcml2ZXRlbXBfZGF0
YSAqc3QpCisreworKwlzdHJ1Y3Qgc2NzaV9kZXZpY2UgKnNkZXYgPSBzdC0+c2RldjsKKysJdTgg
KmJ1ZiA9IHN0LT5zbWFydGRhdGE7CisrCXN0cnVjdCBzY3NpX3ZwZCAqdnBkOworKwlib29sIGlz
X2F0YSwgaXNfc2F0YTsKKysJYm9vbCBoYXZlX3NjdF9kYXRhX3RhYmxlOworKwlib29sIGhhdmVf
c2N0X3RlbXA7CisrCWJvb2wgaGF2ZV9zbWFydDsKKysJYm9vbCBoYXZlX3NjdDsKKysJdTE2ICph
dGFfaWQ7CisrCXUxNiB2ZXJzaW9uOworKwlsb25nIHRlbXA7CisrCWludCBlcnI7CisrCisrCS8q
IFNDU0ktQVRBIFRyYW5zbGF0aW9uIHByZXNlbnQ/ICovCisrCXJjdV9yZWFkX2xvY2soKTsKKysJ
dnBkID0gcmN1X2RlcmVmZXJlbmNlKHNkZXYtPnZwZF9wZzg5KTsKKysKKysJLyoKKysJICogVmVy
aWZ5IHRoYXQgQVRBIElERU5USUZZIERFVklDRSBkYXRhIGlzIGluY2x1ZGVkIGluIEFUQSBJbmZv
cm1hdGlvbgorKwkgKiBWUEQgYW5kIHRoYXQgdGhlIGRyaXZlIGltcGxlbWVudHMgdGhlIFNBVEEg
cHJvdG9jb2wuCisrCSAqLworKwlpZiAoIXZwZCB8fCB2cGQtPmxlbiA8IDU3MiB8fCB2cGQtPmRh
dGFbNTZdICE9IEFUQV9DTURfSURfQVRBIHx8CisrCSAgICB2cGQtPmRhdGFbMzZdICE9IDB4MzQp
IHsKKysJCXJjdV9yZWFkX3VubG9jaygpOworKwkJcmV0dXJuIC1FTk9ERVY7CisrCX0KKysJYXRh
X2lkID0gKHUxNiAqKSZ2cGQtPmRhdGFbNjBdOworKwlpc19hdGEgPSBhdGFfaWRfaXNfYXRhKGF0
YV9pZCk7CisrCWlzX3NhdGEgPSBhdGFfaWRfaXNfc2F0YShhdGFfaWQpOworKwloYXZlX3NjdCA9
IGF0YV9pZF9zY3Rfc3VwcG9ydGVkKGF0YV9pZCk7CisrCWhhdmVfc2N0X2RhdGFfdGFibGUgPSBh
dGFfaWRfc2N0X2RhdGFfdGFibGVzKGF0YV9pZCk7CisrCWhhdmVfc21hcnQgPSBhdGFfaWRfc21h
cnRfc3VwcG9ydGVkKGF0YV9pZCkgJiYKKysJCQkJYXRhX2lkX3NtYXJ0X2VuYWJsZWQoYXRhX2lk
KTsKKysKKysJcmN1X3JlYWRfdW5sb2NrKCk7CisrCisrCS8qIGJhaWwgb3V0IGlmIHRoaXMgaXMg
bm90IGEgU0FUQSBkZXZpY2UgKi8KKysJaWYgKCFpc19hdGEgfHwgIWlzX3NhdGEpCisrCQlyZXR1
cm4gLUVOT0RFVjsKKysJaWYgKCFoYXZlX3NjdCkKKysJCWdvdG8gc2tpcF9zY3Q7CisrCisrCWVy
ciA9IGRyaXZldGVtcF9hdGFfY29tbWFuZChzdCwgU01BUlRfUkVBRF9MT0csIFNDVF9TVEFUVVNf
UkVRX0FERFIpOworKwlpZiAoZXJyKQorKwkJZ290byBza2lwX3NjdDsKKysKKysJdmVyc2lvbiA9
IChidWZbU0NUX1NUQVRVU19WRVJTSU9OX0hJR0hdIDw8IDgpIHwKKysJCSAgYnVmW1NDVF9TVEFU
VVNfVkVSU0lPTl9MT1ddOworKwlpZiAodmVyc2lvbiAhPSAyICYmIHZlcnNpb24gIT0gMykKKysJ
CWdvdG8gc2tpcF9zY3Q7CisrCisrCWhhdmVfc2N0X3RlbXAgPSB0ZW1wX2lzX3ZhbGlkKGJ1ZltT
Q1RfU1RBVFVTX1RFTVBdKTsKKysJaWYgKCFoYXZlX3NjdF90ZW1wKQorKwkJZ290byBza2lwX3Nj
dDsKKysKKysJc3QtPmhhdmVfdGVtcF9sb3dlc3QgPSB0ZW1wX2lzX3ZhbGlkKGJ1ZltTQ1RfU1RB
VFVTX1RFTVBfTE9XRVNUXSk7CisrCXN0LT5oYXZlX3RlbXBfaGlnaGVzdCA9IHRlbXBfaXNfdmFs
aWQoYnVmW1NDVF9TVEFUVVNfVEVNUF9ISUdIRVNUXSk7CisrCisrCWlmICghaGF2ZV9zY3RfZGF0
YV90YWJsZSkKKysJCWdvdG8gc2tpcF9zY3Q7CisrCisrCS8qIFJlcXVlc3QgYW5kIHJlYWQgdGVt
cGVyYXR1cmUgaGlzdG9yeSB0YWJsZSAqLworKwltZW1zZXQoYnVmLCAnXDAnLCBzaXplb2Yoc3Qt
PnNtYXJ0ZGF0YSkpOworKwlidWZbMF0gPSA1OwkvKiBkYXRhIHRhYmxlIGNvbW1hbmQgKi8KKysJ
YnVmWzJdID0gMTsJLyogcmVhZCB0YWJsZSAqLworKwlidWZbNF0gPSAyOwkvKiB0ZW1wZXJhdHVy
ZSBoaXN0b3J5IHRhYmxlICovCisrCisrCWVyciA9IGRyaXZldGVtcF9hdGFfY29tbWFuZChzdCwg
U01BUlRfV1JJVEVfTE9HLCBTQ1RfU1RBVFVTX1JFUV9BRERSKTsKKysJaWYgKGVycikKKysJCWdv
dG8gc2tpcF9zY3RfZGF0YTsKKysKKysJZXJyID0gZHJpdmV0ZW1wX2F0YV9jb21tYW5kKHN0LCBT
TUFSVF9SRUFEX0xPRywgU0NUX1JFQURfTE9HX0FERFIpOworKwlpZiAoZXJyKQorKwkJZ290byBz
a2lwX3NjdF9kYXRhOworKworKwkvKgorKwkgKiBUZW1wZXJhdHVyZSBsaW1pdHMgcGVyIEFUIEF0
dGFjaG1lbnQgOCAtCisrCSAqIEFUQS9BVEFQSSBDb21tYW5kIFNldCAoQVRBOC1BQ1MpCisrCSAq
LworKwlzdC0+aGF2ZV90ZW1wX21heCA9IHRlbXBfaXNfdmFsaWQoYnVmWzZdKTsKKysJc3QtPmhh
dmVfdGVtcF9jcml0ID0gdGVtcF9pc192YWxpZChidWZbN10pOworKwlzdC0+aGF2ZV90ZW1wX21p
biA9IHRlbXBfaXNfdmFsaWQoYnVmWzhdKTsKKysJc3QtPmhhdmVfdGVtcF9sY3JpdCA9IHRlbXBf
aXNfdmFsaWQoYnVmWzldKTsKKysKKysJc3QtPnRlbXBfbWF4ID0gdGVtcF9mcm9tX3NjdChidWZb
Nl0pOworKwlzdC0+dGVtcF9jcml0ID0gdGVtcF9mcm9tX3NjdChidWZbN10pOworKwlzdC0+dGVt
cF9taW4gPSB0ZW1wX2Zyb21fc2N0KGJ1Zls4XSk7CisrCXN0LT50ZW1wX2xjcml0ID0gdGVtcF9m
cm9tX3NjdChidWZbOV0pOworKworK3NraXBfc2N0X2RhdGE6CisrCWlmIChoYXZlX3NjdF90ZW1w
KSB7CisrCQlzdC0+Z2V0X3RlbXAgPSBkcml2ZXRlbXBfZ2V0X3NjdHRlbXA7CisrCQlyZXR1cm4g
MDsKKysJfQorK3NraXBfc2N0OgorKwlpZiAoIWhhdmVfc21hcnQpCisrCQlyZXR1cm4gLUVOT0RF
VjsKKysJc3QtPmdldF90ZW1wID0gZHJpdmV0ZW1wX2dldF9zbWFydHRlbXA7CisrCXJldHVybiBk
cml2ZXRlbXBfZ2V0X3NtYXJ0dGVtcChzdCwgaHdtb25fdGVtcF9pbnB1dCwgJnRlbXApOworK30K
KysKKytzdGF0aWMgaW50IGRyaXZldGVtcF9pZGVudGlmeShzdHJ1Y3QgZHJpdmV0ZW1wX2RhdGEg
KnN0KQorK3sKKysJc3RydWN0IHNjc2lfZGV2aWNlICpzZGV2ID0gc3QtPnNkZXY7CisrCisrCS8q
IEJhaWwgb3V0IGltbWVkaWF0ZWx5IGlmIHRoZXJlIGlzIG5vIGlucXVpcnkgZGF0YSAqLworKwlp
ZiAoIXNkZXYtPmlucXVpcnkgfHwgc2Rldi0+aW5xdWlyeV9sZW4gPCAxNikKKysJCXJldHVybiAt
RU5PREVWOworKworKwkvKiBEaXNrIGRldmljZT8gKi8KKysJaWYgKHNkZXYtPnR5cGUgIT0gVFlQ
RV9ESVNLICYmIHNkZXYtPnR5cGUgIT0gVFlQRV9aQkMpCisrCQlyZXR1cm4gLUVOT0RFVjsKKysK
KysJcmV0dXJuIGRyaXZldGVtcF9pZGVudGlmeV9zYXRhKHN0KTsKKyt9CisrCisrc3RhdGljIGlu
dCBkcml2ZXRlbXBfcmVhZChzdHJ1Y3QgZGV2aWNlICpkZXYsIGVudW0gaHdtb25fc2Vuc29yX3R5
cGVzIHR5cGUsCisrCQkJIHUzMiBhdHRyLCBpbnQgY2hhbm5lbCwgbG9uZyAqdmFsKQorK3sKKysJ
c3RydWN0IGRyaXZldGVtcF9kYXRhICpzdCA9IGRldl9nZXRfZHJ2ZGF0YShkZXYpOworKwlpbnQg
ZXJyID0gMDsKKysKKysJaWYgKHR5cGUgIT0gaHdtb25fdGVtcCkKKysJCXJldHVybiAtRUlOVkFM
OworKworKwlzd2l0Y2ggKGF0dHIpIHsKKysJY2FzZSBod21vbl90ZW1wX2lucHV0OgorKwljYXNl
IGh3bW9uX3RlbXBfbG93ZXN0OgorKwljYXNlIGh3bW9uX3RlbXBfaGlnaGVzdDoKKysJCW11dGV4
X2xvY2soJnN0LT5sb2NrKTsKKysJCWVyciA9IHN0LT5nZXRfdGVtcChzdCwgYXR0ciwgdmFsKTsK
KysJCW11dGV4X3VubG9jaygmc3QtPmxvY2spOworKwkJYnJlYWs7CisrCWNhc2UgaHdtb25fdGVt
cF9sY3JpdDoKKysJCSp2YWwgPSBzdC0+dGVtcF9sY3JpdDsKKysJCWJyZWFrOworKwljYXNlIGh3
bW9uX3RlbXBfbWluOgorKwkJKnZhbCA9IHN0LT50ZW1wX21pbjsKKysJCWJyZWFrOworKwljYXNl
IGh3bW9uX3RlbXBfbWF4OgorKwkJKnZhbCA9IHN0LT50ZW1wX21heDsKKysJCWJyZWFrOworKwlj
YXNlIGh3bW9uX3RlbXBfY3JpdDoKKysJCSp2YWwgPSBzdC0+dGVtcF9jcml0OworKwkJYnJlYWs7
CisrCWRlZmF1bHQ6CisrCQllcnIgPSAtRUlOVkFMOworKwkJYnJlYWs7CisrCX0KKysJcmV0dXJu
IGVycjsKKyt9CisrCisrc3RhdGljIHVtb2RlX3QgZHJpdmV0ZW1wX2lzX3Zpc2libGUoY29uc3Qg
dm9pZCAqZGF0YSwKKysJCQkJICAgZW51bSBod21vbl9zZW5zb3JfdHlwZXMgdHlwZSwKKysJCQkJ
ICAgdTMyIGF0dHIsIGludCBjaGFubmVsKQorK3sKKysJY29uc3Qgc3RydWN0IGRyaXZldGVtcF9k
YXRhICpzdCA9IGRhdGE7CisrCisrCXN3aXRjaCAodHlwZSkgeworKwljYXNlIGh3bW9uX3RlbXA6
CisrCQlzd2l0Y2ggKGF0dHIpIHsKKysJCWNhc2UgaHdtb25fdGVtcF9pbnB1dDoKKysJCQlyZXR1
cm4gMDQ0NDsKKysJCWNhc2UgaHdtb25fdGVtcF9sb3dlc3Q6CisrCQkJaWYgKHN0LT5oYXZlX3Rl
bXBfbG93ZXN0KQorKwkJCQlyZXR1cm4gMDQ0NDsKKysJCQlicmVhazsKKysJCWNhc2UgaHdtb25f
dGVtcF9oaWdoZXN0OgorKwkJCWlmIChzdC0+aGF2ZV90ZW1wX2hpZ2hlc3QpCisrCQkJCXJldHVy
biAwNDQ0OworKwkJCWJyZWFrOworKwkJY2FzZSBod21vbl90ZW1wX21pbjoKKysJCQlpZiAoc3Qt
PmhhdmVfdGVtcF9taW4pCisrCQkJCXJldHVybiAwNDQ0OworKwkJCWJyZWFrOworKwkJY2FzZSBo
d21vbl90ZW1wX21heDoKKysJCQlpZiAoc3QtPmhhdmVfdGVtcF9tYXgpCisrCQkJCXJldHVybiAw
NDQ0OworKwkJCWJyZWFrOworKwkJY2FzZSBod21vbl90ZW1wX2xjcml0OgorKwkJCWlmIChzdC0+
aGF2ZV90ZW1wX2xjcml0KQorKwkJCQlyZXR1cm4gMDQ0NDsKKysJCQlicmVhazsKKysJCWNhc2Ug
aHdtb25fdGVtcF9jcml0OgorKwkJCWlmIChzdC0+aGF2ZV90ZW1wX2NyaXQpCisrCQkJCXJldHVy
biAwNDQ0OworKwkJCWJyZWFrOworKwkJZGVmYXVsdDoKKysJCQlicmVhazsKKysJCX0KKysJCWJy
ZWFrOworKwlkZWZhdWx0OgorKwkJYnJlYWs7CisrCX0KKysJcmV0dXJuIDA7CisrfQorKworK3N0
YXRpYyBjb25zdCBzdHJ1Y3QgaHdtb25fY2hhbm5lbF9pbmZvICpkcml2ZXRlbXBfaW5mb1tdID0g
eworKwlIV01PTl9DSEFOTkVMX0lORk8oY2hpcCwKKysJCQkgICBIV01PTl9DX1JFR0lTVEVSX1Ra
KSwKKysJSFdNT05fQ0hBTk5FTF9JTkZPKHRlbXAsIEhXTU9OX1RfSU5QVVQgfAorKwkJCSAgIEhX
TU9OX1RfTE9XRVNUIHwgSFdNT05fVF9ISUdIRVNUIHwKKysJCQkgICBIV01PTl9UX01JTiB8IEhX
TU9OX1RfTUFYIHwKKysJCQkgICBIV01PTl9UX0xDUklUIHwgSFdNT05fVF9DUklUKSwKKysJTlVM
TAorK307CisrCisrc3RhdGljIGNvbnN0IHN0cnVjdCBod21vbl9vcHMgZHJpdmV0ZW1wX29wcyA9
IHsKKysJLmlzX3Zpc2libGUgPSBkcml2ZXRlbXBfaXNfdmlzaWJsZSwKKysJLnJlYWQgPSBkcml2
ZXRlbXBfcmVhZCwKKyt9OworKworK3N0YXRpYyBjb25zdCBzdHJ1Y3QgaHdtb25fY2hpcF9pbmZv
IGRyaXZldGVtcF9jaGlwX2luZm8gPSB7CisrCS5vcHMgPSAmZHJpdmV0ZW1wX29wcywKKysJLmlu
Zm8gPSBkcml2ZXRlbXBfaW5mbywKKyt9OworKworKy8qCisrICogVGhlIGRldmljZSBhcmd1bWVu
dCBwb2ludHMgdG8gc2Rldi0+c2Rldl9kZXYuIEl0cyBwYXJlbnQgaXMKKysgKiBzZGV2LT5zZGV2
X2dlbmRldiwgd2hpY2ggd2UgY2FuIHVzZSB0byBnZXQgdGhlIHNjc2lfZGV2aWNlIHBvaW50ZXIu
CisrICovCisrc3RhdGljIGludCBkcml2ZXRlbXBfYWRkKHN0cnVjdCBkZXZpY2UgKmRldiwgc3Ry
dWN0IGNsYXNzX2ludGVyZmFjZSAqaW50ZikKKyt7CisrCXN0cnVjdCBzY3NpX2RldmljZSAqc2Rl
diA9IHRvX3Njc2lfZGV2aWNlKGRldi0+cGFyZW50KTsKKysJc3RydWN0IGRyaXZldGVtcF9kYXRh
ICpzdDsKKysJaW50IGVycjsKKysKKysJc3QgPSBremFsbG9jKHNpemVvZigqc3QpLCBHRlBfS0VS
TkVMKTsKKysJaWYgKCFzdCkKKysJCXJldHVybiAtRU5PTUVNOworKworKwlzdC0+c2RldiA9IHNk
ZXY7CisrCXN0LT5kZXYgPSBkZXY7CisrCW11dGV4X2luaXQoJnN0LT5sb2NrKTsKKysKKysJaWYg
KGRyaXZldGVtcF9pZGVudGlmeShzdCkpIHsKKysJCWVyciA9IC1FTk9ERVY7CisrCQlnb3RvIGFi
b3J0OworKwl9CisrCisrCXN0LT5od2RldiA9IGh3bW9uX2RldmljZV9yZWdpc3Rlcl93aXRoX2lu
Zm8oZGV2LT5wYXJlbnQsICJkcml2ZXRlbXAiLAorKwkJCQkJCSAgICBzdCwgJmRyaXZldGVtcF9j
aGlwX2luZm8sCisrCQkJCQkJICAgIE5VTEwpOworKwlpZiAoSVNfRVJSKHN0LT5od2RldikpIHsK
KysJCWVyciA9IFBUUl9FUlIoc3QtPmh3ZGV2KTsKKysJCWdvdG8gYWJvcnQ7CisrCX0KKysKKysJ
bGlzdF9hZGQoJnN0LT5saXN0LCAmZHJpdmV0ZW1wX2Rldmxpc3QpOworKwlyZXR1cm4gMDsKKysK
KythYm9ydDoKKysJa2ZyZWUoc3QpOworKwlyZXR1cm4gZXJyOworK30KKysKKytzdGF0aWMgdm9p
ZCBkcml2ZXRlbXBfcmVtb3ZlKHN0cnVjdCBkZXZpY2UgKmRldiwgc3RydWN0IGNsYXNzX2ludGVy
ZmFjZSAqaW50ZikKKyt7CisrCXN0cnVjdCBkcml2ZXRlbXBfZGF0YSAqc3QsICp0bXA7CisrCisr
CWxpc3RfZm9yX2VhY2hfZW50cnlfc2FmZShzdCwgdG1wLCAmZHJpdmV0ZW1wX2Rldmxpc3QsIGxp
c3QpIHsKKysJCWlmIChzdC0+ZGV2ID09IGRldikgeworKwkJCWxpc3RfZGVsKCZzdC0+bGlzdCk7
CisrCQkJaHdtb25fZGV2aWNlX3VucmVnaXN0ZXIoc3QtPmh3ZGV2KTsKKysJCQlrZnJlZShzdCk7
CisrCQkJYnJlYWs7CisrCQl9CisrCX0KKyt9CisrCisrc3RhdGljIHN0cnVjdCBjbGFzc19pbnRl
cmZhY2UgZHJpdmV0ZW1wX2ludGVyZmFjZSA9IHsKKysJLmFkZF9kZXYgPSBkcml2ZXRlbXBfYWRk
LAorKwkucmVtb3ZlX2RldiA9IGRyaXZldGVtcF9yZW1vdmUsCisrfTsKKysKKytzdGF0aWMgaW50
IF9faW5pdCBkcml2ZXRlbXBfaW5pdCh2b2lkKQorK3sKKysJcmV0dXJuIHNjc2lfcmVnaXN0ZXJf
aW50ZXJmYWNlKCZkcml2ZXRlbXBfaW50ZXJmYWNlKTsKKyt9CisrCisrc3RhdGljIHZvaWQgX19l
eGl0IGRyaXZldGVtcF9leGl0KHZvaWQpCisreworKwlzY3NpX3VucmVnaXN0ZXJfaW50ZXJmYWNl
KCZkcml2ZXRlbXBfaW50ZXJmYWNlKTsKKyt9CisrCisrbW9kdWxlX2luaXQoZHJpdmV0ZW1wX2lu
aXQpOworK21vZHVsZV9leGl0KGRyaXZldGVtcF9leGl0KTsKKysKKytNT0RVTEVfQVVUSE9SKCJH
dWVudGVyIFJvZWNrIDxsaW51c0Byb2Vjay11cy5uZXQ+Iik7CisrTU9EVUxFX0RFU0NSSVBUSU9O
KCJIYXJkIGRyaXZlIHRlbXBlcmF0dXJlIG1vbml0b3IiKTsKKytNT0RVTEVfTElDRU5TRSgiR1BM
Iik7Ci0tIAoyLjI1LjEKCgpfX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fXwpvcGVud3J0LWRldmVsIG1haWxpbmcgbGlzdApvcGVud3J0LWRldmVsQGxpc3RzLm9w
ZW53cnQub3JnCmh0dHBzOi8vbGlzdHMub3BlbndydC5vcmcvbWFpbG1hbi9saXN0aW5mby9vcGVu
d3J0LWRldmVsCg==
