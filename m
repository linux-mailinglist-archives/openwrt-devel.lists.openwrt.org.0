Return-Path: <openwrt-devel-bounces+lists+openwrt-devel=lfdr.de@lists.openwrt.org>
X-Original-To: lists+openwrt-devel@lfdr.de
Delivered-To: lists+openwrt-devel@lfdr.de
Received: from bombadil.infradead.org (bombadil.infradead.org [IPv6:2607:7c80:54:e::133])
	by mail.lfdr.de (Postfix) with ESMTPS id 849921B0CC0
	for <lists+openwrt-devel@lfdr.de>; Mon, 20 Apr 2020 15:35:47 +0200 (CEST)
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=lists.infradead.org; s=bombadil.20170209; h=Sender:
	Content-Transfer-Encoding:Content-Type:Cc:List-Subscribe:List-Help:List-Post:
	List-Archive:List-Unsubscribe:List-Id:Subject:MIME-Version:References:
	In-Reply-To:Message-Id:Date:To:From:Reply-To:Content-ID:Content-Description:
	Resent-Date:Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:
	List-Owner; bh=h0cYlecw+PGHz0P79tnTNiESrcxEQDfGCNaRVKrm/rA=; b=CPI9ze4k7UpLcc
	Y3UxpNmLkL8QRDmGG0IRz5kFdOzGN9+naFU07YKP62/q6QP+0tzPrqbDNryjAFLdRvP4dEZw78YUw
	i2YTa265QYqg8QLLpPu7N7DeWUv66IB3v3Un8XEkktA/2p03w/iy0HuNx/829ufxUNCS3Joo9XrNE
	fTJPl+B6v9ZrszDsbPbwwYxXIGv5J1WrvQrHGDiYXfLgG5iogRS4cJA50FFvLT19FAFaPCr3UtU58
	8fjGJtrDO65KWBHuw3MhOSrUuJB6U3IiSfjc3aqe5gN7odBNbvhNZdLs5/kOLbbjhOpbxAhIIZGMa
	OsmHvQoDNp81CPvbmcwQ==;
Received: from localhost ([127.0.0.1] helo=bombadil.infradead.org)
	by bombadil.infradead.org with esmtp (Exim 4.92.3 #3 (Red Hat Linux))
	id 1jQWaM-0000TN-KJ; Mon, 20 Apr 2020 13:35:42 +0000
Received: from vps.slashdirt.org ([144.91.108.218])
 by bombadil.infradead.org with esmtps (Exim 4.92.3 #3 (Red Hat Linux))
 id 1jQWZw-0000C2-Ga
 for openwrt-devel@lists.openwrt.org; Mon, 20 Apr 2020 13:35:19 +0000
Received: from supercopter (82-64-212-153.subs.proxad.net [82.64.212.153])
 (using TLSv1 with cipher DHE-RSA-AES256-SHA (256/256 bits))
 (No client certificate requested)
 by vps.slashdirt.org (Postfix) with ESMTPS id 275D360335;
 Mon, 20 Apr 2020 15:35:11 +0200 (CEST)
DMARC-Filter: OpenDMARC Filter v1.3.2 vps.slashdirt.org 275D360335
Authentication-Results: vps.slashdirt.org; dmarc=fail (p=quarantine dis=none)
 header.from=slashdirt.org
DKIM-Filter: OpenDKIM Filter v2.11.0 vps.slashdirt.org 275D360335
DKIM-Signature: v=1; a=rsa-sha256; c=simple/simple; d=slashdirt.org; s=mail;
 t=1587389712; bh=8BB20RqEXzzamNjnZIxgZ/nan/00hlmVnoIJW8+nCj8=;
 h=From:To:Cc:Subject:Date:In-Reply-To:References:From;
 b=PXNtvqFhjyMtTpvEidtgjy33MuGhD8fy6qqC0QeNznqQpFcDQqIrPrxKapCBSmggY
 iYK9rwlZfTxhTAW8lw54fOXbMhNJAFBqCo4PNsAGbr8yrOTM5dNphazR+BER0l2TKR
 bLWyrVEpow9fU6yoo+lfyOJ9a3zUYp6H00M/X2UQ=
Received: by supercopter (sSMTP sendmail emulation);
 Mon, 20 Apr 2020 15:35:10 +0200
From: =?UTF-8?q?Thibaut=20VAR=C3=88NE?= <hacks@slashdirt.org>
To: openwrt-devel@lists.openwrt.org
Date: Mon, 20 Apr 2020 15:34:50 +0200
Message-Id: <20200420133503.18700-2-hacks@slashdirt.org>
X-Mailer: git-send-email 2.11.0
In-Reply-To: <20200420133503.18700-1-hacks@slashdirt.org>
References: <20200420133503.18700-1-hacks@slashdirt.org>
MIME-Version: 1.0
X-Spam-Status: No, score=-2.0 required=5.0 tests=BAYES_00,DKIM_SIGNED,
 DKIM_VALID,DKIM_VALID_AU,DKIM_VALID_EF,NO_DNS_FOR_FROM,TXREP,
 UNPARSEABLE_RELAY shortcircuit=no autolearn=no autolearn_force=no
 version=3.4.2
X-Spam-Checker-Version: SpamAssassin 3.4.2 (2018-09-13) on vps.slashdirt.org
X-CRM114-Version: 20100106-BlameMichelson ( TRE 0.8.0 (BSD) ) MR-646709E3 
X-CRM114-CacheID: sfid-20200420_063516_905382_65A94224 
X-CRM114-Status: GOOD (  28.40  )
X-Spam-Score: 0.2 (/)
X-Spam-Report: SpamAssassin version 3.4.4 on bombadil.infradead.org summary:
 Content analysis details:   (0.2 points)
 pts rule name              description
 ---- ---------------------- --------------------------------------------------
 0.4 NO_DNS_FOR_FROM        RBL: Envelope sender has no MX or A DNS records
 [listed in slashdirt.org.	IN	A]
 -0.0 SPF_PASS               SPF: sender matches SPF record
 0.0 SPF_HELO_NONE          SPF: HELO does not publish an SPF Record
 -0.1 DKIM_VALID_EF          Message has a valid DKIM or DK signature from
 envelope-from domain
 -0.1 DKIM_VALID_AU          Message has a valid DKIM or DK signature from
 author's domain
 -0.1 DKIM_VALID Message has at least one valid DKIM or DK signature
 0.1 DKIM_SIGNED            Message has a DKIM or DK signature, not necessarily
 valid
Subject: [OpenWrt-Devel] [PATCH v2 01/14] generic: routerboot sysfs platform
 driver
X-BeenThere: openwrt-devel@lists.openwrt.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: <openwrt-devel.lists.openwrt.org>
List-Unsubscribe: <http://lists.infradead.org/mailman/options/openwrt-devel>, 
 <mailto:openwrt-devel-request@lists.openwrt.org?subject=unsubscribe>
List-Archive: <http://lists.infradead.org/pipermail/openwrt-devel/>
List-Post: <mailto:openwrt-devel@lists.openwrt.org>
List-Help: <mailto:openwrt-devel-request@lists.openwrt.org?subject=help>
List-Subscribe: <http://lists.infradead.org/mailman/listinfo/openwrt-devel>,
 <mailto:openwrt-devel-request@lists.openwrt.org?subject=subscribe>
Cc: =?UTF-8?q?Thibaut=20VAR=C3=88NE?= <hacks@slashdirt.org>,
 koen.vandeputte@ncentric.com
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Sender: "openwrt-devel" <openwrt-devel-bounces@lists.openwrt.org>
Errors-To: openwrt-devel-bounces+lists+openwrt-devel=lfdr.de@lists.openwrt.org

VGhpcyBkcml2ZXIgZXhwb3NlcyB0aGUgZGF0YSBlbmNvZGVkIGluIHRoZSAiaGFyZF9jb25maWci
IGZsYXNoIHNlZ21lbnQKb2YgTWlrcm9UaWsgUm91dGVyQk9BUkRzIGRldmljZXMuIEl0IHByZXNl
bnRzIHRoZSBkYXRhIGluIGEgc3lzZnMgZm9sZGVyCm5hbWVkICJoYXJkX2NvbmZpZyIuIFRoZSBX
TEFOIGNhbGlicmF0aW9uIGRhdGEgaXMgYXZhaWxhYmxlIG9uIGRlbWFuZCB2aWEKdGhlICd3bGFu
X2RhdGEnIHN5c2ZzIGZpbGUgaW4gdGhhdCBmb2xkZXIuCgpUaGlzIGRyaXZlciBwZXJtYW5lbnRs
eSBhbGxvY2F0ZXMgYSBjaHVuayBvZiBSQU0gYXMgbGFyZ2UgYXMgdGhlCiJoYXJkX2NvbmZpZyIg
TVREIHBhcnRpdGlvbiAodHlwaWNhbGx5IDRLQiksIGFsdGhvdWdoIGl0IGlzIHRlY2huaWNhbGx5
CnBvc3NpYmxlIHRvIG9wZXJhdGUgZW50aXJlbHkgZnJvbSB0aGUgTVREIGRldmljZSB3aXRob3V0
IHVzaW5nIGEgbG9jYWwKYnVmZmVyIChleGNlcHQgd2hlbiByZXF1ZXN0aW5nIFdMQU4gY2FsaWJy
YXRpb24gZGF0YSksIGF0IHRoZSBjb3N0IG9mIGEKcGVyZm9ybWFuY2UgcGVuYWx0eS4KClRoaXMg
ZHJpdmVyIGRvZXMgbm90IHJldXNlIGFueSBvZiB0aGUgZXhpc3RpbmcgY29kZSBwcmV2aW91c2x5
IGZvdW5kIGluCnJvdXRlcmJvb3QuYy4KClRoaXMgZHJpdmVyIGhhcyBiZWVuIHN1Y2Nlc3NmdWxs
eSB0ZXN0ZWQgb24gQkUgKGF0aDc5KSBhbmQgTEUgKGlwcTQweHgKYW5kIHJhbWlwcykgaGFyZHdh
cmUuCgpUZXN0ZWQtYnk6IFJvZ2VyIFB1ZXlvIENlbnRlbGxlcyA8cm9nZXIucHVleW9AZ3VpZmku
bmV0PgpUZXN0ZWQtYnk6IEJhcHRpc3RlIEpvbmdsZXogPGdpdEBiaXRzb2ZuZXR3b3Jrcy5vcmc+
ClRlc3RlZC1ieTogVG9iaWFzIFNjaHJhbW0gPHQuc2NocmFtbUBtYW5qYXJvLm9yZz4KVGVzdGVk
LWJ5OiBDaHJpc3RvcGhlciBIaWxsIDxjaDY1NzRAZ21haWwuY29tPgpTaWduZWQtb2ZmLWJ5OiBU
aGliYXV0IFZBUsOITkUgPGhhY2tzQHNsYXNoZGlydC5vcmc+Ci0tLQogLi4uL2ZpbGVzL2RyaXZl
cnMvcGxhdGZvcm0vbWlrcm90aWsvS2NvbmZpZyAgICAgICAgfCAgMTggKwogLi4uL2ZpbGVzL2Ry
aXZlcnMvcGxhdGZvcm0vbWlrcm90aWsvTWFrZWZpbGUgICAgICAgfCAgIDQgKwogLi4uL2RyaXZl
cnMvcGxhdGZvcm0vbWlrcm90aWsvcmJfaGFyZGNvbmZpZy5jICAgICAgfCA0ODEgKysrKysrKysr
KysrKysrKysrKysrCiAuLi4vZmlsZXMvZHJpdmVycy9wbGF0Zm9ybS9taWtyb3Rpay9yb3V0ZXJi
b290LmMgICB8IDE4NSArKysrKysrKwogLi4uL2ZpbGVzL2RyaXZlcnMvcGxhdGZvcm0vbWlrcm90
aWsvcm91dGVyYm9vdC5oICAgfCAgMzEgKysKIDUgZmlsZXMgY2hhbmdlZCwgNzE5IGluc2VydGlv
bnMoKykKIGNyZWF0ZSBtb2RlIDEwMDY0NCB0YXJnZXQvbGludXgvZ2VuZXJpYy9maWxlcy9kcml2
ZXJzL3BsYXRmb3JtL21pa3JvdGlrL0tjb25maWcKIGNyZWF0ZSBtb2RlIDEwMDY0NCB0YXJnZXQv
bGludXgvZ2VuZXJpYy9maWxlcy9kcml2ZXJzL3BsYXRmb3JtL21pa3JvdGlrL01ha2VmaWxlCiBj
cmVhdGUgbW9kZSAxMDA2NDQgdGFyZ2V0L2xpbnV4L2dlbmVyaWMvZmlsZXMvZHJpdmVycy9wbGF0
Zm9ybS9taWtyb3Rpay9yYl9oYXJkY29uZmlnLmMKIGNyZWF0ZSBtb2RlIDEwMDY0NCB0YXJnZXQv
bGludXgvZ2VuZXJpYy9maWxlcy9kcml2ZXJzL3BsYXRmb3JtL21pa3JvdGlrL3JvdXRlcmJvb3Qu
YwogY3JlYXRlIG1vZGUgMTAwNjQ0IHRhcmdldC9saW51eC9nZW5lcmljL2ZpbGVzL2RyaXZlcnMv
cGxhdGZvcm0vbWlrcm90aWsvcm91dGVyYm9vdC5oCgpkaWZmIC0tZ2l0IGEvdGFyZ2V0L2xpbnV4
L2dlbmVyaWMvZmlsZXMvZHJpdmVycy9wbGF0Zm9ybS9taWtyb3Rpay9LY29uZmlnIGIvdGFyZ2V0
L2xpbnV4L2dlbmVyaWMvZmlsZXMvZHJpdmVycy9wbGF0Zm9ybS9taWtyb3Rpay9LY29uZmlnCm5l
dyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAwMDAuLjE5NWExZThmZDMKLS0tIC9kZXYv
bnVsbAorKysgYi90YXJnZXQvbGludXgvZ2VuZXJpYy9maWxlcy9kcml2ZXJzL3BsYXRmb3JtL21p
a3JvdGlrL0tjb25maWcKQEAgLTAsMCArMSwxOCBAQAorbWVudWNvbmZpZyBNSUtST1RJSworCWJv
b2wgIlBsYXRmb3JtIHN1cHBvcnQgZm9yIE1pa3JvVGlrIFJvdXRlckJvYXJkIHZpcnR1YWwgZGV2
aWNlcyIKKwlkZWZhdWx0IG4KKwlkZXBlbmRzIG9uIE1URAorCXNlbGVjdCBMWk9fREVDT01QUkVT
UworCWhlbHAKKwkgIFNheSBZIGhlcmUgdG8gZ2V0IHRvIHNlZSBvcHRpb25zIGZvciB0aGUgTWlr
cm9UaWsgUm91dGVyQm9hcmQgcGxhdGZvcm0uCisJICBUaGlzIG9wdGlvbiBhbG9uZSBkb2VzIG5v
dCBhZGQgYW55IGtlcm5lbCBjb2RlLgorCisKK2lmIE1JS1JPVElLCisKK2NvbmZpZyBNSUtST1RJ
S19SQl9TWVNGUworCXRyaXN0YXRlICJSb3V0ZXJCb290IHN5c2ZzIHN1cHBvcnQiCisJaGVscAor
CSAgVGhpcyBkcml2ZXIgZXhwb3NlcyBSb3V0ZXJCb290IGNvbmZpZ3VyYXRpb24gaW4gc3lzZnMu
CisKK2VuZGlmICMgTUlLUk9USUsKZGlmZiAtLWdpdCBhL3RhcmdldC9saW51eC9nZW5lcmljL2Zp
bGVzL2RyaXZlcnMvcGxhdGZvcm0vbWlrcm90aWsvTWFrZWZpbGUgYi90YXJnZXQvbGludXgvZ2Vu
ZXJpYy9maWxlcy9kcml2ZXJzL3BsYXRmb3JtL21pa3JvdGlrL01ha2VmaWxlCm5ldyBmaWxlIG1v
ZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAwMDAuLjRkNTBlZGU5ZmYKLS0tIC9kZXYvbnVsbAorKysg
Yi90YXJnZXQvbGludXgvZ2VuZXJpYy9maWxlcy9kcml2ZXJzL3BsYXRmb3JtL21pa3JvdGlrL01h
a2VmaWxlCkBAIC0wLDAgKzEsNCBAQAorIworIyBNYWtlZmlsZSBmb3IgTWlrcm9UaWsgUm91dGVy
Qm9hcmQgcGxhdGZvcm0gc3BlY2lmaWMgZHJpdmVycworIworb2JqLSQoQ09ORklHX01JS1JPVElL
X1JCX1NZU0ZTKSAgICAgKz0gcm91dGVyYm9vdC5vIHJiX2hhcmRjb25maWcubwpkaWZmIC0tZ2l0
IGEvdGFyZ2V0L2xpbnV4L2dlbmVyaWMvZmlsZXMvZHJpdmVycy9wbGF0Zm9ybS9taWtyb3Rpay9y
Yl9oYXJkY29uZmlnLmMgYi90YXJnZXQvbGludXgvZ2VuZXJpYy9maWxlcy9kcml2ZXJzL3BsYXRm
b3JtL21pa3JvdGlrL3JiX2hhcmRjb25maWcuYwpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAw
MDAwMDAwMDAwLi4wNjUzZDdmOWY2Ci0tLSAvZGV2L251bGwKKysrIGIvdGFyZ2V0L2xpbnV4L2dl
bmVyaWMvZmlsZXMvZHJpdmVycy9wbGF0Zm9ybS9taWtyb3Rpay9yYl9oYXJkY29uZmlnLmMKQEAg
LTAsMCArMSw0ODEgQEAKKy8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBHUEwtMi4wCisvKgor
ICogRHJpdmVyIGZvciBNaWtyb1RpayBSb3V0ZXJCb290IGhhcmQgY29uZmlnLgorICoKKyAqIENv
cHlyaWdodCAoQykgMjAyMCBUaGliYXV0IFZBUsOITkUgPGhhY2tzK2tlcm5lbEBzbGFzaGRpcnQu
b3JnPgorICoKKyAqIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlz
dHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0CisgKiB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdO
VSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIHZlcnNpb24gMiBhcyBwdWJsaXNoZWQKKyAqIGJ5IHRo
ZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24uCisgKgorICogVGhpcyBkcml2ZXIgZXhwb3NlcyB0
aGUgZGF0YSBlbmNvZGVkIGluIHRoZSAiaGFyZF9jb25maWciIGZsYXNoIHNlZ21lbnQgb2YKKyAq
IE1pa3JvVGlrIFJvdXRlckJPQVJEcyBkZXZpY2VzLiBJdCBwcmVzZW50cyB0aGUgZGF0YSBpbiBh
IHN5c2ZzIGZvbGRlcgorICogbmFtZWQgImhhcmRfY29uZmlnIi4gVGhlIFdMQU4gY2FsaWJyYXRp
b24gZGF0YSBpcyBhdmFpbGFibGUgb24gZGVtYW5kIHZpYQorICogdGhlICd3bGFuX2RhdGEnIHN5
c2ZzIGZpbGUgaW4gdGhhdCBmb2xkZXIuCisgKgorICogVGhpcyBkcml2ZXIgcGVybWFuZW50bHkg
YWxsb2NhdGVzIGEgY2h1bmsgb2YgUkFNIGFzIGxhcmdlIGFzIHRoZSBoYXJkX2NvbmZpZworICog
TVREIHBhcnRpdGlvbiwgYWx0aG91Z2ggaXQgaXMgdGVjaG5pY2FsbHkgcG9zc2libGUgdG8gb3Bl
cmF0ZSBlbnRpcmVseSBmcm9tCisgKiB0aGUgTVREIGRldmljZSB3aXRob3V0IHVzaW5nIGEgbG9j
YWwgYnVmZmVyIChleGNlcHQgd2hlbiByZXF1ZXN0aW5nIFdMQU4KKyAqIGNhbGlicmF0aW9uIGRh
dGEpLCBhdCB0aGUgY29zdCBvZiBhIHBlcmZvcm1hbmNlIHBlbmFsdHkuCisgKgorICogU29tZSBj
b25zdGFudCBkZWZpbmVzIGV4dHJhY3RlZCBmcm9tIHJvdXRlcmJvb3Que2MsaH0gYnkgR2Fib3Ig
SnVob3MKKyAqIDxqdWhvc2dAb3BlbndydC5vcmc+CisgKi8KKworI2luY2x1ZGUgPGxpbnV4L3R5
cGVzLmg+CisjaW5jbHVkZSA8bGludXgvbW9kdWxlLmg+CisjaW5jbHVkZSA8bGludXgva2VybmVs
Lmg+CisjaW5jbHVkZSA8bGludXgvc2xhYi5oPgorI2luY2x1ZGUgPGxpbnV4L3BsYXRmb3JtX2Rl
dmljZS5oPgorI2luY2x1ZGUgPGxpbnV4L2Vycm5vLmg+CisjaW5jbHVkZSA8bGludXgva29iamVj
dC5oPgorI2luY2x1ZGUgPGxpbnV4L2JpdG9wcy5oPgorI2luY2x1ZGUgPGxpbnV4L3N0cmluZy5o
PgorI2luY2x1ZGUgPGxpbnV4L210ZC9tdGQuaD4KKyNpbmNsdWRlIDxsaW51eC9zeXNmcy5oPgor
I2luY2x1ZGUgPGxpbnV4L2x6by5oPgorCisjaW5jbHVkZSAicm91dGVyYm9vdC5oIgorCisjZGVm
aW5lIFJCX0hBUkRDT05GSUdfVkVSCQkiMC4wMSIKKyNkZWZpbmUgUFJfUFJFRklYCQkJIltyYl9o
YXJkY29uZmlnXSAiCisKKy8qIElEIHZhbHVlcyBmb3IgaGFyZHdhcmUgc2V0dGluZ3MgKi8KKyNk
ZWZpbmUgUkJfSURfRkxBU0hfSU5GTwkJMHgwMworI2RlZmluZSBSQl9JRF9NQUNfQUREUkVTU19Q
QUNLCQkweDA0CisjZGVmaW5lIFJCX0lEX0JPQVJEX1BST0RVQ1RfQ09ERQkweDA1CisjZGVmaW5l
IFJCX0lEX0JJT1NfVkVSU0lPTgkJMHgwNgorI2RlZmluZSBSQl9JRF9TRFJBTV9USU1JTkdTCQkw
eDA4CisjZGVmaW5lIFJCX0lEX0RFVklDRV9USU1JTkdTCQkweDA5CisjZGVmaW5lIFJCX0lEX1NP
RlRXQVJFX0lECQkweDBBCisjZGVmaW5lIFJCX0lEX1NFUklBTF9OVU1CRVIJCTB4MEIKKyNkZWZp
bmUgUkJfSURfTUVNT1JZX1NJWkUJCTB4MEQKKyNkZWZpbmUgUkJfSURfTUFDX0FERFJFU1NfQ09V
TlQJCTB4MEUKKyNkZWZpbmUgUkJfSURfSFdfT1BUSU9OUwkJMHgxNQorI2RlZmluZSBSQl9JRF9X
TEFOX0RBVEEJCQkweDE2CisjZGVmaW5lIFJCX0lEX0JPQVJEX0lERU5USUZJRVIJCTB4MTcKKyNk
ZWZpbmUgUkJfSURfUFJPRFVDVF9OQU1FCQkweDIxCisjZGVmaW5lIFJCX0lEX0RFRkNPTkYJCQkw
eDI2CisKKy8qIEJpdCBkZWZpbml0aW9ucyBmb3IgaGFyZHdhcmUgb3B0aW9ucyAqLworI2RlZmlu
ZSBSQl9IV19PUFRfTk9fVUFSVAkJQklUKDApCisjZGVmaW5lIFJCX0hXX09QVF9IQVNfVk9MVEFH
RQkJQklUKDEpCisjZGVmaW5lIFJCX0hXX09QVF9IQVNfVVNCCQlCSVQoMikKKyNkZWZpbmUgUkJf
SFdfT1BUX0hBU19BVFRJTlkJCUJJVCgzKQorI2RlZmluZSBSQl9IV19PUFRfTk9fTkFORAkJQklU
KDE0KQorI2RlZmluZSBSQl9IV19PUFRfSEFTX0xDRAkJQklUKDE1KQorI2RlZmluZSBSQl9IV19P
UFRfSEFTX1BPRV9PVVQJCUJJVCgxNikKKyNkZWZpbmUgUkJfSFdfT1BUX0hBU191U0QJCUJJVCgx
NykKKyNkZWZpbmUgUkJfSFdfT1BUX0hBU19TSU0JCUJJVCgxOCkKKyNkZWZpbmUgUkJfSFdfT1BU
X0hBU19TRlAJCUJJVCgyMCkKKyNkZWZpbmUgUkJfSFdfT1BUX0hBU19XSUZJCQlCSVQoMjEpCisj
ZGVmaW5lIFJCX0hXX09QVF9IQVNfVFNfRk9SX0FEQwlCSVQoMjIpCisjZGVmaW5lIFJCX0hXX09Q
VF9IQVNfUExDCQlCSVQoMjkpCisKK3N0YXRpYyBzdHJ1Y3Qga29iamVjdCAqaGNfa29iajsKK3N0
YXRpYyB1OCAqaGNfYnVmOwkJLy8gcm8gYnVmZmVyIGFmdGVyIGluaXQoKTogbm8gbG9ja2luZyBy
ZXF1aXJlZAorc3RhdGljIHNpemVfdCBoY19idWZsZW47CisKKy8qIEFycmF5IG9mIGtub3duIGh3
X29wdGlvbnMgYml0cyB3aXRoIGh1bWFuLWZyaWVuZGx5IHBhcnNpbmcgKi8KK3N0YXRpYyBzdHJ1
Y3QgaGNfaHdvcHQgeworCWNvbnN0IHUzMiBiaXQ7CisJY29uc3QgY2hhciAqc3RyOworfSBjb25z
dCBoY19od29wdHNbXSA9IHsKKwl7CisJCS5iaXQgPSBSQl9IV19PUFRfTk9fVUFSVCwKKwkJLnN0
ciA9ICJubyBVQVJUXHRcdCIsCisJfSwgeworCQkuYml0ID0gUkJfSFdfT1BUX0hBU19WT0xUQUdF
LAorCQkuc3RyID0gImhhcyBWcmVnXHQiLAorCX0sIHsKKwkJLmJpdCA9IFJCX0hXX09QVF9IQVNf
VVNCLAorCQkuc3RyID0gImhhcyB1c2JcdFx0IiwKKwl9LCB7CisJCS5iaXQgPSBSQl9IV19PUFRf
SEFTX0FUVElOWSwKKwkJLnN0ciA9ICJoYXMgQVR0aW55XHQiLAorCX0sIHsKKwkJLmJpdCA9IFJC
X0hXX09QVF9OT19OQU5ELAorCQkuc3RyID0gIm5vIE5BTkRcdFx0IiwKKwl9LCB7CisJCS5iaXQg
PSBSQl9IV19PUFRfSEFTX0xDRCwKKwkJLnN0ciA9ICJoYXMgTENEXHRcdCIsCisJfSwgeworCQku
Yml0ID0gUkJfSFdfT1BUX0hBU19QT0VfT1VULAorCQkuc3RyID0gImhhcyBQT0Ugb3V0XHQiLAor
CX0sIHsKKwkJLmJpdCA9IFJCX0hXX09QVF9IQVNfdVNELAorCQkuc3RyID0gImhhcyBNaWNyb1NE
XHQiLAorCX0sIHsKKwkJLmJpdCA9IFJCX0hXX09QVF9IQVNfU0lNLAorCQkuc3RyID0gImhhcyBT
SU1cdFx0IiwKKwl9LCB7CisJCS5iaXQgPSBSQl9IV19PUFRfSEFTX1NGUCwKKwkJLnN0ciA9ICJo
YXMgU0ZQXHRcdCIsCisJfSwgeworCQkuYml0ID0gUkJfSFdfT1BUX0hBU19XSUZJLAorCQkuc3Ry
ID0gImhhcyBXaUZpXHQiLAorCX0sIHsKKwkJLmJpdCA9IFJCX0hXX09QVF9IQVNfVFNfRk9SX0FE
QywKKwkJLnN0ciA9ICJoYXMgVFMgQURDXHQiLAorCX0sIHsKKwkJLmJpdCA9IFJCX0hXX09QVF9I
QVNfUExDLAorCQkuc3RyID0gImhhcyBQTENcdFx0IiwKKwl9LAorfTsKKworc3RhdGljIHNzaXpl
X3QgaGNfdGFnX3Nob3dfc3RyaW5nKGNvbnN0IHU4ICpwbGQsIHUxNiBwbGRfbGVuLCBjaGFyICpi
dWYpCit7CisJcmV0dXJuIHNucHJpbnRmKGJ1ZiwgcGxkX2xlbisxLCAiJXNcbiIsIHBsZCk7Cit9
CisKK3N0YXRpYyBzc2l6ZV90IGhjX3RhZ19zaG93X3UzMihjb25zdCB1OCAqcGxkLCB1MTYgcGxk
X2xlbiwgY2hhciAqYnVmKQoreworCWNoYXIgKm91dCA9IGJ1ZjsKKwl1MzIgZGF0YTsJLy8gY3B1
LWVuZGlhbgorCisJLyogQ2FsbGVyIGVuc3VyZXMgcGxkX2xlbiA+IDAgKi8KKwlpZiAocGxkX2xl
biAlIHNpemVvZihkYXRhKSkKKwkJcmV0dXJuIC1FSU5WQUw7CisKKwlkYXRhID0gKih1MzIgKilw
bGQ7CisKKwlkbyB7CisJCW91dCArPSBzcHJpbnRmKG91dCwgIjB4JTA4eFxuIiwgZGF0YSk7CisJ
CWRhdGErKzsKKwl9IHdoaWxlICgocGxkX2xlbiAtPSBzaXplb2YoZGF0YSkpKTsKKworCXJldHVy
biBvdXQgLSBidWY7Cit9CisKKy8qCisgKiBUaGUgTUFDIGlzIHN0b3JlZCBuZXR3b3JrLWVuZGlh
biBvbiBhbGwgZGV2aWNlcywgaW4gMiAzMi1iaXQgc2VnbWVudHM6CisgKiA8WFg6WFg6WFg6WFg+
IDxYWDpYWDowMDowMD4uIEtlcm5lbCBwcmludCBoYXMgdXMgY292ZXJlZC4KKyAqLworc3RhdGlj
IHNzaXplX3QgaGNfdGFnX3Nob3dfbWFjKGNvbnN0IHU4ICpwbGQsIHUxNiBwbGRfbGVuLCBjaGFy
ICpidWYpCit7CisJaWYgKDggIT0gcGxkX2xlbikKKwkJcmV0dXJuIC1FSU5WQUw7CisKKwlyZXR1
cm4gc3ByaW50ZihidWYsICIlcE1cbiIsIHBsZCk7Cit9CisKKy8qCisgKiBQcmludCBIVyBvcHRp
b25zIGluIGEgaHVtYW4gcmVhZGFibGUgd2F5OgorICogVGhlIHJhdyBudW1iZXIgYW5kIGluIGRl
Y29kZWQgZm9ybQorICovCitzdGF0aWMgc3NpemVfdCBoY190YWdfc2hvd19od29wdGlvbnMoY29u
c3QgdTggKnBsZCwgdTE2IHBsZF9sZW4sIGNoYXIgKmJ1ZikKK3sKKwljaGFyICpvdXQgPSBidWY7
CisJdTMyIGRhdGE7CS8vIGNwdS1lbmRpYW4KKwlpbnQgaTsKKworCWlmIChzaXplb2YoZGF0YSkg
IT0gcGxkX2xlbikKKwkJcmV0dXJuIC1FSU5WQUw7CisKKwlkYXRhID0gKih1MzIgKilwbGQ7CisJ
b3V0ICs9IHNwcmludGYob3V0LCAicmF3XHRcdDogMHglMDh4XG5cbiIsIGRhdGEpOworCisJZm9y
IChpID0gMDsgaSA8IEFSUkFZX1NJWkUoaGNfaHdvcHRzKTsgaSsrKQorCQlvdXQgKz0gc3ByaW50
ZihvdXQsICIlczogJXNcbiIsIGhjX2h3b3B0c1tpXS5zdHIsCisJCQkgICAgICAgKGRhdGEgJiBo
Y19od29wdHNbaV0uYml0KSA/ICJ0cnVlIiA6ICJmYWxzZSIpOworCisJcmV0dXJuIG91dCAtIGJ1
ZjsKK30KKworc3RhdGljIHNzaXplX3QgaGNfd2xhbl9kYXRhX2Jpbl9yZWFkKHN0cnVjdCBmaWxl
ICpmaWxwLCBzdHJ1Y3Qga29iamVjdCAqa29iaiwKKwkJCQkgICAgIHN0cnVjdCBiaW5fYXR0cmli
dXRlICphdHRyLCBjaGFyICpidWYsCisJCQkJICAgICBsb2ZmX3Qgb2ZmLCBzaXplX3QgY291bnQp
OworCitzdGF0aWMgc3RydWN0IGhjX3dsYW5fYXR0ciB7CisJc3RydWN0IGJpbl9hdHRyaWJ1dGUg
YmF0dHI7CisJdTE2IHBsZF9vZnM7CisJdTE2IHBsZF9sZW47Cit9IGhjX3dsYW5kYXRhX2JhdHRy
ID0geworCS5iYXR0ciA9IF9fQklOX0FUVFIod2xhbl9kYXRhLCBTX0lSVVNSLCBoY193bGFuX2Rh
dGFfYmluX3JlYWQsIE5VTEwsIDApLAorfTsKKworc3RhdGljIHNzaXplX3QgaGNfYXR0cl9zaG93
KHN0cnVjdCBrb2JqZWN0ICprb2JqLCBzdHJ1Y3Qga29ial9hdHRyaWJ1dGUgKmF0dHIsCisJCQkg
ICAgY2hhciAqYnVmKTsKKworLyogQXJyYXkgb2Yga25vd24gdGFncyB0byBwdWJsaXNoIGluIHN5
c2ZzICovCitzdGF0aWMgc3RydWN0IGhjX2F0dHIgeworCWNvbnN0IHUxNiB0YWdfaWQ7CisJc3Np
emVfdCAoKiBjb25zdCB0c2hvdykoY29uc3QgdTggKnBsZCwgdTE2IHBsZF9sZW4sIGNoYXIgKmJ1
Zik7CisJc3RydWN0IGtvYmpfYXR0cmlidXRlIGthdHRyOworCXUxNiBwbGRfb2ZzOworCXUxNiBw
bGRfbGVuOworfSBoY19hdHRyc1tdID0geworCXsKKwkJLnRhZ19pZCA9IFJCX0lEX0ZMQVNIX0lO
Rk8sCisJCS50c2hvdyA9IGhjX3RhZ19zaG93X3UzMiwKKwkJLmthdHRyID0gX19BVFRSKGZsYXNo
X2luZm8sIFNfSVJVU1IsIGhjX2F0dHJfc2hvdywgTlVMTCksCisJfSwgeworCQkudGFnX2lkID0g
UkJfSURfTUFDX0FERFJFU1NfUEFDSywKKwkJLnRzaG93ID0gaGNfdGFnX3Nob3dfbWFjLAorCQku
a2F0dHIgPSBfX0FUVFIobWFjX2Jhc2UsIFNfSVJVU1IsIGhjX2F0dHJfc2hvdywgTlVMTCksCisJ
fSwgeworCQkudGFnX2lkID0gUkJfSURfQk9BUkRfUFJPRFVDVF9DT0RFLAorCQkudHNob3cgPSBo
Y190YWdfc2hvd19zdHJpbmcsCisJCS5rYXR0ciA9IF9fQVRUUihib2FyZF9wcm9kdWN0X2NvZGUs
IFNfSVJVU1IsIGhjX2F0dHJfc2hvdywgTlVMTCksCisJfSwgeworCQkudGFnX2lkID0gUkJfSURf
QklPU19WRVJTSU9OLAorCQkudHNob3cgPSBoY190YWdfc2hvd19zdHJpbmcsCisJCS5rYXR0ciA9
IF9fQVRUUihib290ZXJfdmVyc2lvbiwgU19JUlVTUiwgaGNfYXR0cl9zaG93LCBOVUxMKSwKKwl9
LCB7CisJCS50YWdfaWQgPSBSQl9JRF9TRVJJQUxfTlVNQkVSLAorCQkudHNob3cgPSBoY190YWdf
c2hvd19zdHJpbmcsCisJCS5rYXR0ciA9IF9fQVRUUihib2FyZF9zZXJpYWwsIFNfSVJVU1IsIGhj
X2F0dHJfc2hvdywgTlVMTCksCisJfSwgeworCQkudGFnX2lkID0gUkJfSURfTUVNT1JZX1NJWkUs
CisJCS50c2hvdyA9IGhjX3RhZ19zaG93X3UzMiwKKwkJLmthdHRyID0gX19BVFRSKG1lbV9zaXpl
LCBTX0lSVVNSLCBoY19hdHRyX3Nob3csIE5VTEwpLAorCX0sIHsKKwkJLnRhZ19pZCA9IFJCX0lE
X01BQ19BRERSRVNTX0NPVU5ULAorCQkudHNob3cgPSBoY190YWdfc2hvd191MzIsCisJCS5rYXR0
ciA9IF9fQVRUUihtYWNfY291bnQsIFNfSVJVU1IsIGhjX2F0dHJfc2hvdywgTlVMTCksCisJfSwg
eworCQkudGFnX2lkID0gUkJfSURfSFdfT1BUSU9OUywKKwkJLnRzaG93ID0gaGNfdGFnX3Nob3df
aHdvcHRpb25zLAorCQkua2F0dHIgPSBfX0FUVFIoaHdfb3B0aW9ucywgU19JUlVTUiwgaGNfYXR0
cl9zaG93LCBOVUxMKSwKKwl9LCB7CisJCS50YWdfaWQgPSBSQl9JRF9XTEFOX0RBVEEsCisJCS50
c2hvdyA9IE5VTEwsCisJfSwgeworCQkudGFnX2lkID0gUkJfSURfQk9BUkRfSURFTlRJRklFUiwK
KwkJLnRzaG93ID0gaGNfdGFnX3Nob3dfc3RyaW5nLAorCQkua2F0dHIgPSBfX0FUVFIoYm9hcmRf
aWRlbnRpZmllciwgU19JUlVTUiwgaGNfYXR0cl9zaG93LCBOVUxMKSwKKwl9LCB7CisJCS50YWdf
aWQgPSBSQl9JRF9QUk9EVUNUX05BTUUsCisJCS50c2hvdyA9IGhjX3RhZ19zaG93X3N0cmluZywK
KwkJLmthdHRyID0gX19BVFRSKHByb2R1Y3RfbmFtZSwgU19JUlVTUiwgaGNfYXR0cl9zaG93LCBO
VUxMKSwKKwl9LCB7CisJCS50YWdfaWQgPSBSQl9JRF9ERUZDT05GLAorCQkudHNob3cgPSBoY190
YWdfc2hvd19zdHJpbmcsCisJCS5rYXR0ciA9IF9fQVRUUihkZWZjb25mLCBTX0lSVVNSLCBoY19h
dHRyX3Nob3csIE5VTEwpLAorCX0KK307CisKKy8qCisgKiBJZiB0aGUgUkJfSURfV0xBTl9EQVRB
IHBheWxvYWQgc3RhcnRzIHdpdGggUkJfTUFHSUNfRVJELCB0aGVuIHBhc3QKKyAqIHRoYXQgbWFn
aWMgbnVtYmVyIHRoZSBwYXlsb2FkIGl0c2VsZiBjb250YWlucyBhIHJvdXRlcmJvb3QgdGFnIG5v
ZGUKKyAqIGxvY2F0aW5nIHRoZSBMWk8tY29tcHJlc3NlZCBjYWxpYnJhdGlvbiBkYXRhIGF0IGlk
IDB4MS4KKyAqLworc3RhdGljIGludCBoY193bGFuX2RhdGFfdW5wYWNrX2VyZChjb25zdCB1OCAq
aW5idWYsIHNpemVfdCBpbmxlbiwKKwkJCQkgICB2b2lkICpvdXRidWYsIHNpemVfdCAqb3V0bGVu
KQoreworCXUxNiBsem9fb2ZzLCBsem9fbGVuOworCWludCByZXQ7CisKKwkvKiBGaW5kIGVtYmVk
ZGVkIHRhZyAqLworCXJldCA9IHJvdXRlcmJvb3RfdGFnX2ZpbmQoaW5idWYsIGlubGVuLCAweDEs
CS8vIGFsd2F5cyBpZCAxCisJCQkJICAmbHpvX29mcywgJmx6b19sZW4pOworCWlmIChyZXQpIHsK
KwkJcHJfZGVidWcoUFJfUFJFRklYICJFUkQgZGF0YSBub3QgZm91bmRcbiIpOworCQlnb3RvIGZh
aWw7CisJfQorCisJaWYgKGx6b19sZW4gPiBpbmxlbikgeworCQlwcl9kZWJ1ZyhQUl9QUkVGSVgg
IkludmFsaWQgRVJEIGRhdGEgbGVuZ3RoXG4iKTsKKwkJcmV0ID0gLUVJTlZBTDsKKwkJZ290byBm
YWlsOworCX0KKworCXJldCA9IGx6bzF4X2RlY29tcHJlc3Nfc2FmZShpbmJ1Zitsem9fb2ZzLCBs
em9fbGVuLCBvdXRidWYsIG91dGxlbik7CisJaWYgKHJldCkKKwkJcHJfZGVidWcoUFJfUFJFRklY
ICJMWk8gZGVjb21wcmVzc2lvbiBlcnJvciAoJWQpXG4iLCByZXQpOworCitmYWlsOgorCXJldHVy
biByZXQ7Cit9CisKK3N0YXRpYyBpbnQgaGNfd2xhbl9kYXRhX3VucGFjayhjb25zdCBzaXplX3Qg
dG9mcywgc2l6ZV90IHRsZW4sCisJCQkgICAgICAgdm9pZCAqb3V0YnVmLCBzaXplX3QgKm91dGxl
bikKK3sKKwljb25zdCB1OCAqbGJ1ZjsKKwl1MzIgbWFnaWM7CisJaW50IHJldDsKKworCS8qIENh
bGxlciBlbnN1cmUgdGxlbiA+IDAuIHRvZnMgaXMgYWxpZ25lZCAqLworCWlmICgodG9mcyArIHRs
ZW4pID4gaGNfYnVmbGVuKQorCQlyZXR1cm4gLUVJTzsKKworCWxidWYgPSBoY19idWYgKyB0b2Zz
OworCW1hZ2ljID0gKih1MzIgKilsYnVmOworCisJcmV0ID0gLUVOT0RBVEE7CisJc3dpdGNoICht
YWdpYykgeworCWNhc2UgUkJfTUFHSUNfRVJEOgorCQkvKiBTa2lwIG1hZ2ljICovCisJCWxidWYg
Kz0gc2l6ZW9mKG1hZ2ljKTsKKwkJdGxlbiAtPSBzaXplb2YobWFnaWMpOworCQlyZXQgPSBoY193
bGFuX2RhdGFfdW5wYWNrX2VyZChsYnVmLCB0bGVuLCBvdXRidWYsIG91dGxlbik7CisJCWJyZWFr
OworCWRlZmF1bHQ6CisJCS8qCisJCSAqIElmIHRoZSBSQl9JRF9XTEFOX0RBVEEgcGF5bG9hZCBk
b2Vzbid0IHN0YXJ0IHdpdGggYQorCQkgKiBtYWdpYyBudW1iZXIsIHRoZSBwYXlsb2FkIGl0c2Vs
ZiBpcyB0aGUgcmF3IFJMRS1lbmNvZGVkCisJCSAqIGNhbGlicmF0aW9uIGRhdGEuCisJCSAqLwor
CQlyZXQgPSByb3V0ZXJib290X3JsZV9kZWNvZGUobGJ1ZiwgdGxlbiwgb3V0YnVmLCBvdXRsZW4p
OworCQlpZiAocmV0KQorCQkJcHJfZGVidWcoUFJfUFJFRklYICJSTEUgZGVjb2RpbmcgZXJyb3Ig
KCVkKVxuIiwgcmV0KTsKKwkJYnJlYWs7CisJfQorCisJcmV0dXJuIHJldDsKK30KKworc3RhdGlj
IHNzaXplX3QgaGNfYXR0cl9zaG93KHN0cnVjdCBrb2JqZWN0ICprb2JqLCBzdHJ1Y3Qga29ial9h
dHRyaWJ1dGUgKmF0dHIsCisJCQkgICAgY2hhciAqYnVmKQoreworCXN0cnVjdCBoY19hdHRyICpo
Y19hdHRyOworCWNvbnN0IHU4ICpwbGQ7CisJdTE2IHBsZF9sZW47CisKKwloY19hdHRyID0gY29u
dGFpbmVyX29mKGF0dHIsIHR5cGVvZigqaGNfYXR0ciksIGthdHRyKTsKKworCWlmICghaGNfYXR0
ci0+cGxkX2xlbikKKwkJcmV0dXJuIC1FTk9FTlQ7CisKKwlwbGQgPSBoY19idWYgKyBoY19hdHRy
LT5wbGRfb2ZzOworCXBsZF9sZW4gPSBoY19hdHRyLT5wbGRfbGVuOworCisJcmV0dXJuIGhjX2F0
dHItPnRzaG93KHBsZCwgcGxkX2xlbiwgYnVmKTsKK30KKworLyoKKyAqIFRoaXMgZnVuY3Rpb24g
d2lsbCBhbGxvY2F0ZSBhbmQgZnJlZSBtZW1vcnkgZXZlcnkgdGltZSBpdCBpcyBjYWxsZWQuIFRo
aXMKKyAqIGlzIG5vdCB0aGUgZmFzdGVzdCB3YXkgdG8gZG8gdGhpcywgYnV0IHNpbmNlIHRoZSBk
YXRhIGlzIHJhcmVseSByZWFkLCB0aGlzCisgKiBtYWtlcyBpdCBwb3NzaWJsZSB0byBzYXZlIG1l
bW9yeSBmb3IgdGhlIHN5c3RlbS4KKyAqLworc3RhdGljIHNzaXplX3QgaGNfd2xhbl9kYXRhX2Jp
bl9yZWFkKHN0cnVjdCBmaWxlICpmaWxwLCBzdHJ1Y3Qga29iamVjdCAqa29iaiwKKwkJCQkgICAg
IHN0cnVjdCBiaW5fYXR0cmlidXRlICphdHRyLCBjaGFyICpidWYsCisJCQkJICAgICBsb2ZmX3Qg
b2ZmLCBzaXplX3QgY291bnQpCit7CisJc3RydWN0IGhjX3dsYW5fYXR0ciAqaGNfd2F0dHI7CisJ
c2l6ZV90IG91dGxlbjsKKwl2b2lkICpvdXRidWY7CisJaW50IHJldDsKKworCWhjX3dhdHRyID0g
Y29udGFpbmVyX29mKGF0dHIsIHR5cGVvZigqaGNfd2F0dHIpLCBiYXR0cik7CisKKwlpZiAoIWhj
X3dhdHRyLT5wbGRfbGVuKQorCQlyZXR1cm4gLUVOT0VOVDsKKworCW91dGxlbiA9IFJCX0FSVF9T
SVpFOworCisJLyogRG9uJ3QgYm90aGVyIHVucGFja2luZyBpZiB0aGUgc291cmNlIGlzIGFscmVh
ZHkgdG9vIGxhcmdlICovCisJaWYgKGhjX3dhdHRyLT5wbGRfbGVuID4gb3V0bGVuKQorCQlyZXR1
cm4gLUVGQklHOworCisJb3V0YnVmID0ga21hbGxvYyhvdXRsZW4sIEdGUF9LRVJORUwpOworCWlm
ICghb3V0YnVmKQorCQlyZXR1cm4gLUVOT01FTTsKKworCXJldCA9IGhjX3dsYW5fZGF0YV91bnBh
Y2soaGNfd2F0dHItPnBsZF9vZnMsIGhjX3dhdHRyLT5wbGRfbGVuLCBvdXRidWYsICZvdXRsZW4p
OworCWlmIChyZXQpIHsKKwkJa2ZyZWUob3V0YnVmKTsKKwkJcmV0dXJuIHJldDsKKwl9CisKKwlp
ZiAob2ZmID49IG91dGxlbikgeworCQlrZnJlZShvdXRidWYpOworCQlyZXR1cm4gMDsKKwl9CisK
KwlpZiAob2ZmICsgY291bnQgPiBvdXRsZW4pCisJCWNvdW50ID0gb3V0bGVuIC0gb2ZmOworCisJ
bWVtY3B5KGJ1Ziwgb3V0YnVmICsgb2ZmLCBjb3VudCk7CisKKwlrZnJlZShvdXRidWYpOworCXJl
dHVybiBjb3VudDsKK30KKworaW50IF9faW5pdCByYl9oYXJkY29uZmlnX2luaXQoc3RydWN0IGtv
YmplY3QgKnJiX2tvYmopCit7CisJc3RydWN0IG10ZF9pbmZvICptdGQ7CisJc2l6ZV90IGJ5dGVz
X3JlYWQsIGJ1ZmxlbjsKKwljb25zdCB1OCAqYnVmOworCWludCBpLCByZXQ7CisJdTMyIG1hZ2lj
OworCisJLy8gVE9ETyBhbGxvdyBvdmVycmlkZQorCW10ZCA9IGdldF9tdGRfZGV2aWNlX25tKFJC
X01URF9IQVJEX0NPTkZJRyk7CisJaWYgKElTX0VSUihtdGQpKQorCQlyZXR1cm4gLUVOT0RFVjsK
KworCWhjX2J1ZmxlbiA9IG10ZC0+c2l6ZTsKKwloY19idWYgPSBrbWFsbG9jKGhjX2J1Zmxlbiwg
R0ZQX0tFUk5FTCk7CisJaWYgKCFoY19idWYpCisJCXJldHVybiAtRU5PTUVNOworCisJcmV0ID0g
bXRkX3JlYWQobXRkLCAwLCBoY19idWZsZW4sICZieXRlc19yZWFkLCBoY19idWYpOworCisJaWYg
KGJ5dGVzX3JlYWQgIT0gaGNfYnVmbGVuKSB7CisJCXJldCA9IC1FSU87CisJCWdvdG8gZmFpbDsK
Kwl9CisKKwkvKiBDaGVjayB3ZSBoYXZlIHdoYXQgd2UgZXhwZWN0ICovCisJbWFnaWMgPSAqKGNv
bnN0IHUzMiAqKWhjX2J1ZjsKKwlpZiAoUkJfTUFHSUNfSEFSRCAhPSBtYWdpYykgeworCQlyZXQg
PSAtRUlOVkFMOworCQlnb3RvIGZhaWw7CisJfQorCisJLyogU2tpcCBtYWdpYyAqLworCWJ1ZiA9
IGhjX2J1ZiArIHNpemVvZihtYWdpYyk7CisJYnVmbGVuID0gaGNfYnVmbGVuIC0gc2l6ZW9mKG1h
Z2ljKTsKKworCS8qIFBvcHVsYXRlIHN5c2ZzICovCisJcmV0ID0gLUVOT01FTTsKKwloY19rb2Jq
ID0ga29iamVjdF9jcmVhdGVfYW5kX2FkZChSQl9NVERfSEFSRF9DT05GSUcsIHJiX2tvYmopOwor
CWlmICghaGNfa29iaikKKwkJZ290byBmYWlsOworCisJLyogTG9jYXRlIGFuZCBwdWJsaXNoIGFs
bCBrbm93biB0YWdzICovCisJZm9yIChpID0gMDsgaSA8IEFSUkFZX1NJWkUoaGNfYXR0cnMpOyBp
KyspIHsKKwkJcmV0ID0gcm91dGVyYm9vdF90YWdfZmluZChidWYsIGJ1ZmxlbiwgaGNfYXR0cnNb
aV0udGFnX2lkLAorCQkJCQkgICZoY19hdHRyc1tpXS5wbGRfb2ZzLCAmaGNfYXR0cnNbaV0ucGxk
X2xlbik7CisJCWlmIChyZXQpIHsKKwkJCWhjX2F0dHJzW2ldLnBsZF9vZnMgPSBoY19hdHRyc1tp
XS5wbGRfbGVuID0gMDsKKwkJCWNvbnRpbnVlOworCQl9CisKKwkJLyogQWNjb3VudCBmb3Igc2tp
cHBlZCBtYWdpYyAqLworCQloY19hdHRyc1tpXS5wbGRfb2ZzICs9IHNpemVvZihtYWdpYyk7CisK
KwkJLyogU3BlY2lhbCBjYXNlIFJCX0lEX1dMQU5fREFUQSB0byBwcmVwIGFuZCBjcmVhdGUgdGhl
IGJpbmFyeSBhdHRyaWJ1dGUgKi8KKwkJaWYgKChSQl9JRF9XTEFOX0RBVEEgPT0gaGNfYXR0cnNb
aV0udGFnX2lkKSAmJiBoY19hdHRyc1tpXS5wbGRfbGVuKSB7CisJCQloY193bGFuZGF0YV9iYXR0
ci5wbGRfb2ZzID0gaGNfYXR0cnNbaV0ucGxkX29mczsKKwkJCWhjX3dsYW5kYXRhX2JhdHRyLnBs
ZF9sZW4gPSBoY19hdHRyc1tpXS5wbGRfbGVuOworCisJCQlyZXQgPSBzeXNmc19jcmVhdGVfYmlu
X2ZpbGUoaGNfa29iaiwgJmhjX3dsYW5kYXRhX2JhdHRyLmJhdHRyKTsKKwkJCWlmIChyZXQpCisJ
CQkJcHJfZXJyKFBSX1BSRUZJWCAiQ291bGQgbm90IGNyZWF0ZSAlcyBzeXNmcyBlbnRyeSAoJWQp
XG4iLAorCQkJCSAgICAgICBoY193bGFuZGF0YV9iYXR0ci5iYXR0ci5hdHRyLm5hbWUsIHJldCk7
CisJCX0KKwkJLyogQWxsIG90aGVyIHRhZ3MgYXJlIHB1Ymxpc2hlZCB2aWEgc3RhbmRhcmQgYXR0
cmlidXRlcyAqLworCQllbHNlIHsKKwkJCXJldCA9IHN5c2ZzX2NyZWF0ZV9maWxlKGhjX2tvYmos
ICZoY19hdHRyc1tpXS5rYXR0ci5hdHRyKTsKKwkJCWlmIChyZXQpCisJCQkJcHJfZXJyKFBSX1BS
RUZJWCAiQ291bGQgbm90IGNyZWF0ZSAlcyBzeXNmcyBlbnRyeSAoJWQpXG4iLAorCQkJCSAgICAg
ICBoY19hdHRyc1tpXS5rYXR0ci5hdHRyLm5hbWUsIHJldCk7CisJCX0KKwl9CisKKwlwcl9pbmZv
KCJNaWtyb1RpayBSb3V0ZXJCT0FSRCBoYXJkd2FyZSBjb25maWd1cmF0aW9uIHN5c2ZzIGRyaXZl
ciB2IiBSQl9IQVJEQ09ORklHX1ZFUiAiXG4iKTsKKworCXJldHVybiAwOworCitmYWlsOgorCWtm
cmVlKGhjX2J1Zik7CisJcmV0dXJuIHJldDsKK30KKwordm9pZCBfX2V4aXQgcmJfaGFyZGNvbmZp
Z19leGl0KHZvaWQpCit7CisJa29iamVjdF9wdXQoaGNfa29iaik7CisJa2ZyZWUoaGNfYnVmKTsK
K30KZGlmZiAtLWdpdCBhL3RhcmdldC9saW51eC9nZW5lcmljL2ZpbGVzL2RyaXZlcnMvcGxhdGZv
cm0vbWlrcm90aWsvcm91dGVyYm9vdC5jIGIvdGFyZ2V0L2xpbnV4L2dlbmVyaWMvZmlsZXMvZHJp
dmVycy9wbGF0Zm9ybS9taWtyb3Rpay9yb3V0ZXJib290LmMKbmV3IGZpbGUgbW9kZSAxMDA2NDQK
aW5kZXggMDAwMDAwMDAwMC4uYjIwYWQyOGFjYgotLS0gL2Rldi9udWxsCisrKyBiL3RhcmdldC9s
aW51eC9nZW5lcmljL2ZpbGVzL2RyaXZlcnMvcGxhdGZvcm0vbWlrcm90aWsvcm91dGVyYm9vdC5j
CkBAIC0wLDAgKzEsMTg1IEBACisvLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogR1BMLTIuMAor
LyoKKyAqIERyaXZlciBmb3IgTWlrcm9UaWsgUm91dGVyQm9vdCBmbGFzaCBkYXRhLiBDb21tb24g
cm91dGluZXMuCisgKgorICogQ29weXJpZ2h0IChDKSAyMDIwIFRoaWJhdXQgVkFSw4hORSA8aGFj
a3Mra2VybmVsQHNsYXNoZGlydC5vcmc+CisgKgorICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29m
dHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkgaXQKKyAqIHVuZGVy
IHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdmVyc2lvbiAyIGFz
IHB1Ymxpc2hlZAorICogYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbi4KKyAqLworCisj
aW5jbHVkZSA8bGludXgvdHlwZXMuaD4KKyNpbmNsdWRlIDxsaW51eC9tb2R1bGUuaD4KKyNpbmNs
dWRlIDxsaW51eC9rZXJuZWwuaD4KKyNpbmNsdWRlIDxsaW51eC9iaXRvcHMuaD4KKyNpbmNsdWRl
IDxsaW51eC9zdHJpbmcuaD4KKyNpbmNsdWRlIDxsaW51eC9tdGQvbXRkLmg+CisjaW5jbHVkZSA8
bGludXgvc3lzZnMuaD4KKworI2luY2x1ZGUgInJvdXRlcmJvb3QuaCIKKworc3RhdGljIHN0cnVj
dCBrb2JqZWN0ICpyYl9rb2JqOworCisvKioKKyAqIHJvdXRlcmJvb3RfdGFnX2ZpbmQoKSAtIExv
Y2F0ZSBhIGdpdmVuIHRhZyBpbiByb3V0ZXJib290IGNvbmZpZyBkYXRhLgorICogQGJ1ZmhlYWQ6
IHRoZSBidWZmZXIgdG8gbG9vayBpbnRvLiBNdXN0IHN0YXJ0IHdpdGggYSB0YWcgbm9kZS4KKyAq
IEBidWZsZW46IHNpemUgb2YgYnVmaGVhZAorICogQHRhZ19pZDogdGhlIHRhZyBpZGVudGlmaWVy
IHRvIGxvb2sgZm9yCisgKiBAcGxkX29mczogd2lsbCBiZSB1cGRhdGVkIHdpdGggdGFnIHBheWxv
YWQgb2Zmc2V0IGluIGJ1ZmhlYWQsIGlmIHRhZyBmb3VuZAorICogQHBsZF9sZW46IHdpbGwgYmUg
dXBkYXRlZCB3aXRoIHRhZyBwYXlsb2FkIHNpemUsIGlmIHRhZyBmb3VuZAorICoKKyAqIFRoaXMg
aW5jYXJuYXRpb24gb2YgdGFnX2ZpbmQoKSBkb2VzIG9ubHkgdGhhdDogaXQgZmluZHMgYSBzcGVj
aWZpYyByb3V0ZXJib290CisgKiB0YWcgbm9kZSBpbiB0aGUgaW5wdXQgYnVmZmVyLiBSb3V0ZXJi
b290IHRhZyBub2RlcyBhcmUgdTMyIHZhbHVlczoKKyAqIC0gVGhlIGxvdyBuaWJibGUgaXMgdGhl
IHRhZyBpZGVudGlmaWNhdGlvbiBudW1iZXIsCisgKiAtIFRoZSBoaWdoIG5pYmJsZSBpcyB0aGUg
dGFnIHBheWxvYWQgbGVuZ3RoIChub2RlIGV4Y2x1ZGVkKSBpbiBieXRlcy4KKyAqIFRoZSBwYXls
b2FkIGltbWVkaWF0ZWx5IGZvbGxvd3MgdGhlIHRhZyBub2RlLiBUYWcgbm9kZXMgYXJlIDMyYml0
LWFsaWduZWQuCisgKiBUaGUgcmV0dXJuZWQgcGxkX29mcyB3aWxsIGFsd2F5cyBiZSBhbGlnbmVk
LiBwbGRfbGVuIG1heSBub3QgZW5kIG9uIDMyYml0CisgKiBib3VuZGFyeSAodGhlIG9ubHkga25v
d24gY2FzZSBpcyB3aGVuIHBhcnNpbmcgRVJEIGRhdGEpLgorICogVGhlIG5vZGVzIGFyZSBjcHUt
ZW5kaWFuIG9uIHRoZSBmbGFzaCBtZWRpYS4gVGhlIHBheWxvYWQgaXMgY3B1LWVuZGlhbiB3aGVu
CisgKiBhcHBsaWNhYmxlLiBUYWcgbm9kZXMgYXJlIG5vdCBvcmRlcmVkIChieSBJRCkgb24gZmxh
c2guCisgKgorICogUmV0dXJuOiAwIG9uIHN1Y2Nlc3Mgb3IgZXJybm8KKyAqLworaW50IHJvdXRl
cmJvb3RfdGFnX2ZpbmQoY29uc3QgdTggKmJ1ZmhlYWQsIGNvbnN0IHNpemVfdCBidWZsZW4sIGNv
bnN0IHUxNiB0YWdfaWQsCisJCQl1MTYgKnBsZF9vZnMsIHUxNiAqcGxkX2xlbikKK3sKKwljb25z
dCB1MzIgKmRhdHVtLCAqYnVmZW5kOworCXUzMiBub2RlOworCXUxNiBpZCwgbGVuOworCWludCBy
ZXQ7CisKKwlpZiAoIWJ1ZmhlYWQgfHwgIXRhZ19pZCkKKwkJcmV0dXJuIC1FSU5WQUw7CisKKwly
ZXQgPSAtRU5PRU5UOworCWRhdHVtID0gKGNvbnN0IHUzMiAqKWJ1ZmhlYWQ7CisJYnVmZW5kID0g
KGNvbnN0IHUzMiAqKShidWZoZWFkICsgYnVmbGVuKTsKKworCXdoaWxlIChkYXR1bSA8IGJ1ZmVu
ZCkgeworCQlub2RlID0gKmRhdHVtKys7CisKKwkJLyogVGFnIGxpc3QgZW5kcyB3aXRoIG51bGwg
bm9kZSAqLworCQlpZiAoIW5vZGUpCisJCQlicmVhazsKKworCQlpZCA9IG5vZGUgJiAweEZGRkY7
CisJCWxlbiA9IG5vZGUgPj4gMTY7CisKKwkJaWYgKHRhZ19pZCA9PSBpZCkgeworCQkJaWYgKGRh
dHVtID49IGJ1ZmVuZCkKKwkJCQlicmVhazsKKworCQkJaWYgKHBsZF9vZnMpCisJCQkJKnBsZF9v
ZnMgPSAodTE2KSgodTggKilkYXR1bSAtIGJ1ZmhlYWQpOworCQkJaWYgKHBsZF9sZW4pCisJCQkJ
KnBsZF9sZW4gPSBsZW47CisKKwkJCXJldCA9IDA7CisJCQlicmVhazsKKwkJfQorCisJCS8qCisJ
CSAqIFRoZSBvbmx5IGtub3duIHNpdHVhdGlvbiB3aGVyZSBsZW4gbWF5IG5vdCBlbmQgb24gMzJi
aXQKKwkJICogYm91bmRhcnkgaXMgd2l0aGluIEVSRCBkYXRhLiBTaW5jZSB3ZSdyZSBvbmx5IGV4
dHJhY3RpbmcKKwkJICogb25lIHRhZyAodGhlIGZpcnN0IGFuZCBvbmx5IG9uZSkgZnJvbSB0aGF0
IGRhdGEsIHdlIHNob3VsZAorCQkgKiBuZXZlciBuZWVkIHRvIGZvcmNlZnVsbHkgQUxJR04oKS4g
RG8gaXQgYW55d2F5LCB0aGlzIGlzIG5vdCBhCisJCSAqIHBlcmZvcm1hbmNlIHBhdGguCisJCSAq
LworCQlsZW4gPSBBTElHTihsZW4sIHNpemVvZigqZGF0dW0pKTsKKwkJZGF0dW0gKz0gbGVuIC8g
c2l6ZW9mKCpkYXR1bSk7CisJfQorCisJcmV0dXJuIHJldDsKK30KKworLyoqCisgKiByb3V0ZXJi
b290X3JsZV9kZWNvZGUoKSAtIFNpbXBsZSBSTEUgKE1pa3JvVGlrIHZhcmlhbnQpIGRlY29kaW5n
IHJvdXRpbmUuCisgKiBAaW46IGlucHV0IGJ1ZmZlciB0byBkZWNvZGUKKyAqIEBpbmxlbjogc2l6
ZSBvZiBpbgorICogQG91dDogb3V0cHV0IGJ1ZmZlciB0byB3cml0ZSBkZWNvZGVkIGRhdGEgdG8K
KyAqIEBvdXRsZW46IHBvaW50ZXIgdG8gb3V0IHNpemUgd2hlbiBmdW5jdGlvbiBpcyBjYWxsZWQs
IHdpbGwgYmUgdXBkYXRlZCB3aXRoCisgKiBzaXplIG9mIGRlY29kZWQgb3V0cHV0IG9uIHJldHVy
bgorICoKKyAqIE1pa3JvVGlrJ3MgdmFyaWFudCBvZiBSTEUgb3BlcmF0ZXMgYXMgZm9sbG93cywg
Y29uc2lkZXJpbmcgYSBzaWduZWQgcnVuIGJ5dGU6CisgKiAtIHBvc2l0aXZlIHJ1biA9PiBjbGFz
c2ljIFJMRQorICogLSBuZWdhdGl2ZSBydW4gPT4gdGhlIG5leHQgLTxydW4+IGJ5dGVzIG11c3Qg
YmUgY29waWVkIHZlcmJhdGltCisgKiBUaGUgQVBJIGlzIG1hdGNoZWQgb24gdGhlIGx6bzF4IHJv
dXRpbmVzIGZvciBjb252ZW5pZW5jZS4KKyAqCisgKiBOQjogVGhlIG91dHB1dCBidWZmZXIgY2Fu
bm90IG92ZXJsYXAgd2l0aCB0aGUgaW5wdXQgYnVmZmVyLgorICoKKyAqIFJldHVybjogMCBvbiBz
dWNjZXNzIG9yIGVycm5vCisgKi8KK2ludCByb3V0ZXJib290X3JsZV9kZWNvZGUoY29uc3QgdTgg
KmluLCBzaXplX3QgaW5sZW4sIHU4ICpvdXQsIHNpemVfdCAqb3V0bGVuKQoreworCWludCByZXQs
IHJ1biwgbmJ5dGVzOwkvLyB1c2UgbmF0aXZlIHR5cGVzIGZvciBzcGVlZAorCXU4IGJ5dGU7CisK
KwlpZiAoIWluIHx8IChpbmxlbiA8IDIpIHx8ICFvdXQpCisJCXJldHVybiAtRUlOVkFMOworCisJ
cmV0ID0gLUVOT1NQQzsKKwluYnl0ZXMgPSAwOworCXdoaWxlIChpbmxlbiA+PSAyKSB7CisJCXJ1
biA9ICppbisrOworCQlpbmxlbi0tOworCisJCS8qIFZlcmJhdGltIGNvcGllcyAqLworCQlpZiAo
cnVuICYgMHg4MCkgeworCQkJLyogSW52ZXJ0IHJ1biBieXRlIHNpZ24gKi8KKwkJCXJ1biA9IH5y
dW4gJiAweEZGOworCQkJcnVuKys7CisKKwkJCWlmIChydW4gPiBpbmxlbikKKwkJCQlnb3RvIGZh
aWw7CisKKwkJCWlubGVuIC09IHJ1bjsKKworCQkJbmJ5dGVzICs9IHJ1bjsKKwkJCWlmIChuYnl0
ZXMgPiAqb3V0bGVuKQorCQkJCWdvdG8gZmFpbDsKKworCQkJd2hpbGUgKHJ1bi0tID4gMCkKKwkJ
CQkqb3V0KysgPSAqaW4rKzsKKwkJfQorCQkvKiBTdHJlYW0gb2YgaGFsZi13b3JkcyBSTEU6IDxy
dW4+PGJ5dGU+LiBydW4gPT0gMCBpcyBpZ25vcmVkICovCisJCWVsc2UgeworCQkJYnl0ZSA9ICpp
bisrOworCQkJaW5sZW4tLTsKKworCQkJbmJ5dGVzICs9IHJ1bjsKKwkJCWlmIChuYnl0ZXMgPiAq
b3V0bGVuKQorCQkJCWdvdG8gZmFpbDsKKworCQkJd2hpbGUgKHJ1bi0tID4gMCkKKwkJCQkqb3V0
KysgPSBieXRlOworCQl9CisJfQorCisJcmV0ID0gMDsKK2ZhaWw6CisJKm91dGxlbiA9IG5ieXRl
czsKKwlyZXR1cm4gcmV0OworfQorCitzdGF0aWMgaW50IF9faW5pdCByb3V0ZXJib290X2luaXQo
dm9pZCkKK3sKKwlyYl9rb2JqID0ga29iamVjdF9jcmVhdGVfYW5kX2FkZCgibWlrcm90aWsiLCBm
aXJtd2FyZV9rb2JqKTsKKwlpZiAoIXJiX2tvYmopCisJCXJldHVybiAtRU5PTUVNOworCisJcmV0
dXJuIHJiX2hhcmRjb25maWdfaW5pdChyYl9rb2JqKTsKK30KKworc3RhdGljIHZvaWQgX19leGl0
IHJvdXRlcmJvb3RfZXhpdCh2b2lkKQoreworCXJiX2hhcmRjb25maWdfZXhpdCgpOworCWtvYmpl
Y3RfcHV0KHJiX2tvYmopOwkvLyByZWN1cnNpdmUgYWZhaWN0Cit9CisKK21vZHVsZV9pbml0KHJv
dXRlcmJvb3RfaW5pdCk7Cittb2R1bGVfZXhpdChyb3V0ZXJib290X2V4aXQpOworCitNT0RVTEVf
TElDRU5TRSgiR1BMIik7CitNT0RVTEVfREVTQ1JJUFRJT04oIk1pa3JvVGlrIFJvdXRlckJvb3Qg
c3lzZnMgc3VwcG9ydCIpOworTU9EVUxFX0FVVEhPUigiVGhpYmF1dCBWQVJFTkUiKTsKZGlmZiAt
LWdpdCBhL3RhcmdldC9saW51eC9nZW5lcmljL2ZpbGVzL2RyaXZlcnMvcGxhdGZvcm0vbWlrcm90
aWsvcm91dGVyYm9vdC5oIGIvdGFyZ2V0L2xpbnV4L2dlbmVyaWMvZmlsZXMvZHJpdmVycy9wbGF0
Zm9ybS9taWtyb3Rpay9yb3V0ZXJib290LmgKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAw
MDAwMDAwMC4uZDJjYTQxZmIxYgotLS0gL2Rldi9udWxsCisrKyBiL3RhcmdldC9saW51eC9nZW5l
cmljL2ZpbGVzL2RyaXZlcnMvcGxhdGZvcm0vbWlrcm90aWsvcm91dGVyYm9vdC5oCkBAIC0wLDAg
KzEsMzEgQEAKKy8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBHUEwtMi4wCisvKgorICogQ29t
bW9uIGRlZmluaXRpb25zIGZvciBNaWtyb1RpayBSb3V0ZXJCb290IGRhdGEuCisgKgorICogQ29w
eXJpZ2h0IChDKSAyMDIwIFRoaWJhdXQgVkFSw4hORSA8aGFja3Mra2VybmVsQHNsYXNoZGlydC5v
cmc+CisgKi8KKworCisjaWZuZGVmIF9ST1VURVJCT09UX0hfCisjZGVmaW5lIF9ST1VURVJCT09U
X0hfCisKKyNpbmNsdWRlIDxsaW51eC90eXBlcy5oPgorCisvLyB0aGVzZSBtYWdpYyB2YWx1ZXMg
YXJlIHN0b3JlZCBpbiBjcHUtZW5kaWFubmVzcyBvbiBmbGFzaAorI2RlZmluZSBSQl9NQUdJQ19I
QVJECSgoJ0gnKSB8ICgnYScgPDwgOCkgfCAoJ3InIDw8IDE2KSB8ICgnZCcgPDwgMjQpKQorI2Rl
ZmluZSBSQl9NQUdJQ19TT0ZUCSgoJ1MnKSB8ICgnbycgPDwgOCkgfCAoJ2YnIDw8IDE2KSB8ICgn
dCcgPDwgMjQpKQorI2RlZmluZSBSQl9NQUdJQ19MWk9SCSgoJ0wnKSB8ICgnWicgPDwgOCkgfCAo
J08nIDw8IDE2KSB8ICgnUicgPDwgMjQpKQorI2RlZmluZSBSQl9NQUdJQ19FUkQJKCgnRScgPDwg
MTYpIHwgKCdSJyA8PCA4KSB8ICgnRCcpKQorCisjZGVmaW5lIFJCX0FSVF9TSVpFCTB4MTAwMDAK
KworI2RlZmluZSBSQl9NVERfSEFSRF9DT05GSUcJImhhcmRfY29uZmlnIgorI2RlZmluZSBSQl9N
VERfU09GVF9DT05GSUcJInNvZnRfY29uZmlnIgorCitpbnQgcm91dGVyYm9vdF90YWdfZmluZChj
b25zdCB1OCAqYnVmaGVhZCwgY29uc3Qgc2l6ZV90IGJ1ZmxlbiwgY29uc3QgdTE2IHRhZ19pZCwg
dTE2ICpwbGRfb2ZzLCB1MTYgKnBsZF9sZW4pOworaW50IHJvdXRlcmJvb3RfcmxlX2RlY29kZShj
b25zdCB1OCAqaW4sIHNpemVfdCBpbmxlbiwgdTggKm91dCwgc2l6ZV90ICpvdXRsZW4pOworCitp
bnQgX19pbml0IHJiX2hhcmRjb25maWdfaW5pdChzdHJ1Y3Qga29iamVjdCAqcmJfa29iaik7Cit2
b2lkIF9fZXhpdCByYl9oYXJkY29uZmlnX2V4aXQodm9pZCk7CisKKyNlbmRpZiAvKiBfUk9VVEVS
Qk9PVF9IXyAqLwotLSAKMi4xMS4wCgoKX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX18Kb3BlbndydC1kZXZlbCBtYWlsaW5nIGxpc3QKb3BlbndydC1kZXZlbEBs
aXN0cy5vcGVud3J0Lm9yZwpodHRwczovL2xpc3RzLm9wZW53cnQub3JnL21haWxtYW4vbGlzdGlu
Zm8vb3BlbndydC1kZXZlbAo=
