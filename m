Return-Path: <openwrt-devel-bounces+lists+openwrt-devel=lfdr.de@lists.openwrt.org>
X-Original-To: lists+openwrt-devel@lfdr.de
Delivered-To: lists+openwrt-devel@lfdr.de
Received: from bombadil.infradead.org (bombadil.infradead.org [IPv6:2607:7c80:54:e::133])
	by mail.lfdr.de (Postfix) with ESMTPS id DB06B127039
	for <lists+openwrt-devel@lfdr.de>; Thu, 19 Dec 2019 23:03:23 +0100 (CET)
DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt; c=relaxed/relaxed;
	d=lists.infradead.org; s=bombadil.20170209; h=Sender:
	Content-Transfer-Encoding:Content-Type:Cc:List-Subscribe:List-Help:List-Post:
	List-Archive:List-Unsubscribe:List-Id:Subject:MIME-Version:References:
	In-Reply-To:Message-Id:Date:To:From:Reply-To:Content-ID:Content-Description:
	Resent-Date:Resent-From:Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:
	List-Owner; bh=MWvf7fUTc+EQymGwhZMpYTjFmZVhkh7Tc5eR1gGuDVg=; b=eh/z0H/0GjI4TM
	1HDMlKaAExBUDdSfoG6YPWgRFOIcU8th51sJMcu4ZkAFdAnCeeIqxTfgaVii93O99G5hYZ2+7UQdi
	d2Yjw0a6MU1EMIDh4zYbbm4pAc7hgoof882WV9FVKObC9CDMWDzZLfT9JPT0aMTCkDuGe6GxcfbUU
	0nyoGs+41YoCQnyv7cknqL+2UyX1Vb15j3wE/ReWQV1NLbH3mhEOLmR6MAqG92RB3y862YhSiIUjX
	RZaGREnlrypuuuHg4o2J3eYY8lFIjk+Ol7ppFFwE3JlxC/MInenkRI563fimS6dalhSAl5eUilyzt
	6svrU0aZW1oH0Giyja/A==;
Received: from localhost ([127.0.0.1] helo=bombadil.infradead.org)
	by bombadil.infradead.org with esmtp (Exim 4.92.3 #3 (Red Hat Linux))
	id 1ii3tA-00019e-Sk; Thu, 19 Dec 2019 22:03:20 +0000
Received: from smtp-out.xnet.cz ([178.217.244.18])
 by bombadil.infradead.org with esmtps (Exim 4.92.3 #3 (Red Hat Linux))
 id 1ii3ou-0000xb-2B
 for openwrt-devel@lists.openwrt.org; Thu, 19 Dec 2019 21:59:00 +0000
Received: from meh.true.cz (meh.true.cz [108.61.167.218])
 (Authenticated sender: petr@true.cz)
 by smtp-out.xnet.cz (Postfix) with ESMTPSA id EFEF64B58;
 Thu, 19 Dec 2019 22:58:52 +0100 (CET)
Received: by meh.true.cz (OpenSMTPD) with ESMTP id 54394f59;
 Thu, 19 Dec 2019 22:58:39 +0100 (CET)
From: =?UTF-8?q?Petr=20=C5=A0tetiar?= <ynezz@true.cz>
To: openwrt-devel@lists.openwrt.org
Date: Thu, 19 Dec 2019 22:58:34 +0100
Message-Id: <20191219215836.21773-19-ynezz@true.cz>
In-Reply-To: <20191219215836.21773-1-ynezz@true.cz>
References: <20191219215836.21773-1-ynezz@true.cz>
MIME-Version: 1.0
X-CRM114-Version: 20100106-BlameMichelson ( TRE 0.8.0 (BSD) ) MR-646709E3 
X-CRM114-CacheID: sfid-20191219_135856_307415_13C7B537 
X-CRM114-Status: GOOD (  10.92  )
X-Spam-Score: 0.0 (/)
X-Spam-Report: SpamAssassin version 3.4.2 on bombadil.infradead.org summary:
 Content analysis details:   (0.0 points)
 pts rule name              description
 ---- ---------------------- --------------------------------------------------
 -0.0 RCVD_IN_DNSWL_NONE     RBL: Sender listed at https://www.dnswl.org/,
 no trust [178.217.244.18 listed in list.dnswl.org]
 0.0 SPF_HELO_NONE          SPF: HELO does not publish an SPF Record
 0.0 SPF_NONE               SPF: sender does not publish an SPF Record
Subject: [OpenWrt-Devel] [PATCH libubox 18/20] blobmsg: add _len variants
 for all attribute checking methods
X-BeenThere: openwrt-devel@lists.openwrt.org
X-Mailman-Version: 2.1.29
Precedence: list
List-Id: <openwrt-devel.lists.openwrt.org>
List-Unsubscribe: <http://lists.infradead.org/mailman/options/openwrt-devel>, 
 <mailto:openwrt-devel-request@lists.openwrt.org?subject=unsubscribe>
List-Archive: <http://lists.infradead.org/pipermail/openwrt-devel/>
List-Post: <mailto:openwrt-devel@lists.openwrt.org>
List-Help: <mailto:openwrt-devel-request@lists.openwrt.org?subject=help>
List-Subscribe: <http://lists.infradead.org/mailman/listinfo/openwrt-devel>,
 <mailto:openwrt-devel-request@lists.openwrt.org?subject=subscribe>
Cc: =?UTF-8?q?Petr=20=C5=A0tetiar?= <ynezz@true.cz>,
 Tobias Schramm <tobleminer@gmail.com>
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Sender: "openwrt-devel" <openwrt-devel-bounces@lists.openwrt.org>
Errors-To: openwrt-devel-bounces+lists+openwrt-devel=lfdr.de@lists.openwrt.org

RnJvbTogVG9iaWFzIFNjaHJhbW0gPHRvYmxlbWluZXJAZ21haWwuY29tPgoKSW50cm9kdWNlIF9s
ZW4gdmFyaWFudHMgb2YgYmxvYm1zZyBhdHRyaWJ1dGUgY2hlY2tpbmcgZnVuY3Rpb25zIHdoaWNo
CmFpbXMgdG8gcHJvdmlkZSBzYWZlciBpbXBsZW1lbnRhdGlvbiBhcyB0aG9zZSBmdW5jdGlvbnMg
c2hvdWxkIGxpbWl0IGFsbAptZW1vcnkgYWNjZXNzZXMgcGVyZm9ybWVkIG9uIHRoZSBibG9iIHRv
IHRoZSByYW5nZSBbYXR0ciwgYXR0ciArIGxlbl0KKHVwcGVyIGJvdW5kIG5vbiBpbmNsdXNpdmUp
IGFuZCB0aHVzIHNob3VsZCBiZSBzdWl0ZWQgZm9yIGNoZWNraW5nIG9mCnVudHJ1c3RlZCBibG9i
IGF0dHJpYnV0ZXMuCgpXaGlsZSBhdCBpdCBhZGQgc29tZSBjb21tZW50cyBpbiBvcmRlciB0byBt
YWtlIGl0IGNsZWFyLgoKU2lnbmVkLW9mZi1ieTogVG9iaWFzIFNjaHJhbW0gPHRvYmxlbWluZXJA
Z21haWwuY29tPgpbX3NhZmUgLT4gX2xlbiwgYmxvYm1zZ19jaGVja19hcnJheV9sZW4gZml4LCBj
b21taXQgc3ViamVjdC9kZXNjIGZhY2VsaWZ0XQpTaWduZWQtb2ZmLWJ5OiBQZXRyIMWgdGV0aWFy
IDx5bmV6ekB0cnVlLmN6PgotLS0KIGJsb2Jtc2cuYyB8IDIxICsrKysrKysrKysrKysrKysrKy0t
LQogYmxvYm1zZy5oIHwgNTUgKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysr
KysrKysrKysrKysrKysrLQogMiBmaWxlcyBjaGFuZ2VkLCA3MiBpbnNlcnRpb25zKCspLCA0IGRl
bGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL2Jsb2Jtc2cuYyBiL2Jsb2Jtc2cuYwppbmRleCBmYmM2
ZDJkZTkxMzUuLjdjZDA5MzQ2MDBkZSAxMDA2NDQKLS0tIGEvYmxvYm1zZy5jCisrKyBiL2Jsb2Jt
c2cuYwpAQCAtMTAwLDEyICsxMDAsMjIgQEAgYm9vbCBibG9ibXNnX2NoZWNrX2F0dHJfbGVuKGNv
bnN0IHN0cnVjdCBibG9iX2F0dHIgKmF0dHIsIGJvb2wgbmFtZSwgc2l6ZV90IGxlbikKIH0KIAog
aW50IGJsb2Jtc2dfY2hlY2tfYXJyYXkoY29uc3Qgc3RydWN0IGJsb2JfYXR0ciAqYXR0ciwgaW50
IHR5cGUpCit7CisJcmV0dXJuIGJsb2Jtc2dfY2hlY2tfYXJyYXlfbGVuKGF0dHIsIHR5cGUsIGJs
b2JfcmF3X2xlbihhdHRyKSk7Cit9CisKK2ludCBibG9ibXNnX2NoZWNrX2FycmF5X2xlbihjb25z
dCBzdHJ1Y3QgYmxvYl9hdHRyICphdHRyLCBpbnQgdHlwZSwgc2l6ZV90IGxlbikKIHsKIAlzdHJ1
Y3QgYmxvYl9hdHRyICpjdXI7CiAJYm9vbCBuYW1lOwotCXNpemVfdCByZW07CiAJaW50IHNpemUg
PSAwOwogCisJaWYgKHR5cGUgPiBCTE9CTVNHX1RZUEVfTEFTVCkKKwkJcmV0dXJuIC0xOworCisJ
aWYgKCFibG9ibXNnX2NoZWNrX2F0dHJfbGVuKGF0dHIsIGZhbHNlLCBsZW4pKQorCQlyZXR1cm4g
LTE7CisKIAlzd2l0Y2ggKGJsb2Jtc2dfdHlwZShhdHRyKSkgewogCWNhc2UgQkxPQk1TR19UWVBF
X1RBQkxFOgogCQluYW1lID0gdHJ1ZTsKQEAgLTExNywxMSArMTI3LDExIEBAIGludCBibG9ibXNn
X2NoZWNrX2FycmF5KGNvbnN0IHN0cnVjdCBibG9iX2F0dHIgKmF0dHIsIGludCB0eXBlKQogCQly
ZXR1cm4gLTE7CiAJfQogCi0JYmxvYm1zZ19mb3JfZWFjaF9hdHRyKGN1ciwgYXR0ciwgcmVtKSB7
CisJX19ibG9ibXNnX2Zvcl9lYWNoX2F0dHIoY3VyLCBhdHRyLCBsZW4pIHsKIAkJaWYgKHR5cGUg
IT0gQkxPQk1TR19UWVBFX1VOU1BFQyAmJiBibG9ibXNnX3R5cGUoY3VyKSAhPSB0eXBlKQogCQkJ
cmV0dXJuIC0xOwogCi0JCWlmICghYmxvYm1zZ19jaGVja19hdHRyKGN1ciwgbmFtZSkpCisJCWlm
ICghYmxvYm1zZ19jaGVja19hdHRyX2xlbihjdXIsIG5hbWUsIGxlbikpCiAJCQlyZXR1cm4gLTE7
CiAKIAkJc2l6ZSsrOwpAQCAtMTM1LDYgKzE0NSwxMSBAQCBib29sIGJsb2Jtc2dfY2hlY2tfYXR0
cl9saXN0KGNvbnN0IHN0cnVjdCBibG9iX2F0dHIgKmF0dHIsIGludCB0eXBlKQogCXJldHVybiBi
bG9ibXNnX2NoZWNrX2FycmF5KGF0dHIsIHR5cGUpID49IDA7CiB9CiAKK2Jvb2wgYmxvYm1zZ19j
aGVja19hdHRyX2xpc3RfbGVuKGNvbnN0IHN0cnVjdCBibG9iX2F0dHIgKmF0dHIsIGludCB0eXBl
LCBzaXplX3QgbGVuKQoreworCXJldHVybiBibG9ibXNnX2NoZWNrX2FycmF5X2xlbihhdHRyLCB0
eXBlLCBsZW4pID49IDA7Cit9CisKIGludCBibG9ibXNnX3BhcnNlX2FycmF5KGNvbnN0IHN0cnVj
dCBibG9ibXNnX3BvbGljeSAqcG9saWN5LCBpbnQgcG9saWN5X2xlbiwKIAkJCXN0cnVjdCBibG9i
X2F0dHIgKip0Yiwgdm9pZCAqZGF0YSwgdW5zaWduZWQgaW50IGxlbikKIHsKZGlmZiAtLWdpdCBh
L2Jsb2Jtc2cuaCBiL2Jsb2Jtc2cuaAppbmRleCBjNDQwMTU5NDJhMzcuLmFmODhjMWZlYjg2ZiAx
MDA2NDQKLS0tIGEvYmxvYm1zZy5oCisrKyBiL2Jsb2Jtc2cuaApAQCAtMTA0LDE5ICsxMDQsNjYg
QEAgc3RhdGljIGlubGluZSBzaXplX3QgYmxvYm1zZ19sZW4oY29uc3Qgc3RydWN0IGJsb2JfYXR0
ciAqYXR0cikKIAlyZXR1cm4gYmxvYm1zZ19kYXRhX2xlbihhdHRyKTsKIH0KIAorLyoKKyAqIGJs
b2Jtc2dfY2hlY2tfYXR0cjogdmFsaWRhdGUgYSBsaXN0IG9mIGF0dHJpYnV0ZXMKKyAqCisgKiBU
aGlzIG1ldGhvZCBtYXkgYmUgdXNlZCB3aXRoIHRydXN0ZWQgZGF0YSBvbmx5LiBQcm92aWRpbmcK
KyAqIG1hbGZvcm1lZCBibG9icyB3aWxsIGNhdXNlIG91dCBvZiBib3VuZHMgbWVtb3J5IGFjY2Vz
cy4KKyAqLwogYm9vbCBibG9ibXNnX2NoZWNrX2F0dHIoY29uc3Qgc3RydWN0IGJsb2JfYXR0ciAq
YXR0ciwgYm9vbCBuYW1lKTsKLWJvb2wgYmxvYm1zZ19jaGVja19hdHRyX2xpc3QoY29uc3Qgc3Ry
dWN0IGJsb2JfYXR0ciAqYXR0ciwgaW50IHR5cGUpOwogCisvKgorICogYmxvYm1zZ19jaGVja19h
dHRyX2xlbjogdmFsaWRhdGUgYSBsaXN0IG9mIGF0dHJpYnV0ZXMKKyAqCisgKiBUaGlzIG1ldGhv
ZCBzaG91bGQgYmUgc2FmZXIgaW1wbGVtZW50YXRpb24gb2YgYmxvYm1zZ19jaGVja19hdHRyLgor
ICogSXQgd2lsbCBsaW1pdCBhbGwgbWVtb3J5IGFjY2VzcyBwZXJmb3JtZWQgb24gdGhlIGJsb2Ig
dG8gdGhlCisgKiByYW5nZSBbYXR0ciwgYXR0ciArIGxlbl0gKHVwcGVyIGJvdW5kIG5vbiBpbmNs
dXNpdmUpIGFuZCBpcworICogdGh1cyBzdWl0ZWQgZm9yIGNoZWNraW5nIG9mIHVudHJ1c3RlZCBi
bG9iIGF0dHJpYnV0ZXMuCisgKi8KIGJvb2wgYmxvYm1zZ19jaGVja19hdHRyX2xlbihjb25zdCBz
dHJ1Y3QgYmxvYl9hdHRyICphdHRyLCBib29sIG5hbWUsIHNpemVfdCBsZW4pOwogCisvKgorICog
YmxvYm1zZ19jaGVja19hdHRyX2xpc3Q6IHZhbGlkYXRlIGEgbGlzdCBvZiBhdHRyaWJ1dGVzCisg
KgorICogVGhpcyBtZXRob2QgbWF5IGJlIHVzZWQgd2l0aCB0cnVzdGVkIGRhdGEgb25seS4gUHJv
dmlkaW5nCisgKiBtYWxmb3JtZWQgYmxvYnMgd2lsbCBjYXVzZSBvdXQgb2YgYm91bmRzIG1lbW9y
eSBhY2Nlc3MuCisgKi8KK2Jvb2wgYmxvYm1zZ19jaGVja19hdHRyX2xpc3QoY29uc3Qgc3RydWN0
IGJsb2JfYXR0ciAqYXR0ciwgaW50IHR5cGUpOworCisvKgorICogYmxvYm1zZ19jaGVja19hdHRy
X2xpc3RfbGVuOiB2YWxpZGF0ZSBhIGxpc3Qgb2YgdW50cnVzdGVkIGF0dHJpYnV0ZXMKKyAqCisg
KiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgc2FmZXIgaW1wbGVtZW50YXRpb24gb2YgYmxvYm1zZ19j
aGVja19hdHRyX2xpc3QuCisgKiBJdCB3aWxsIGxpbWl0IGFsbCBtZW1vcnkgYWNjZXNzIHBlcmZv
cm1lZCBvbiB0aGUgYmxvYiB0byB0aGUKKyAqIHJhbmdlIFthdHRyLCBhdHRyICsgbGVuXSAodXBw
ZXIgYm91bmQgbm9uIGluY2x1c2l2ZSkgYW5kIGlzCisgKiB0aHVzIHN1aXRlZCBmb3IgY2hlY2tp
bmcgb2YgdW50cnVzdGVkIGJsb2IgYXR0cmlidXRlcy4KKyAqLworYm9vbCBibG9ibXNnX2NoZWNr
X2F0dHJfbGlzdF9sZW4oY29uc3Qgc3RydWN0IGJsb2JfYXR0ciAqYXR0ciwgaW50IHR5cGUsIHNp
emVfdCBsZW4pOworCiAvKgogICogYmxvYm1zZ19jaGVja19hcnJheTogdmFsaWRhdGUgYXJyYXkv
dGFibGUgYW5kIHJldHVybiBzaXplCiAgKgogICogQ2hlY2tzIGlmIGFsbCBlbGVtZW50cyBvZiBh
biBhcnJheSBvciB0YWJsZSBhcmUgdmFsaWQgYW5kIGhhdmUKICAqIHRoZSBzcGVjaWZpZWQgdHlw
ZS4gUmV0dXJucyB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBhcnJheQorICoKKyAqIFRo
aXMgbWV0aG9kIG1heSBiZSB1c2VkIHdpdGggdHJ1c3RlZCBkYXRhIG9ubHkuIFByb3ZpZGluZwor
ICogbWFsZm9ybWVkIGJsb2JzIHdpbGwgY2F1c2Ugb3V0IG9mIGJvdW5kcyBtZW1vcnkgYWNjZXNz
LgogICovCiBpbnQgYmxvYm1zZ19jaGVja19hcnJheShjb25zdCBzdHJ1Y3QgYmxvYl9hdHRyICph
dHRyLCBpbnQgdHlwZSk7CiAKKy8qCisgKiBibG9ibXNnX2NoZWNrX2FycmF5X2xlbjogdmFsaWRh
dGUgdW50cnVzdGVkIGFycmF5L3RhYmxlIGFuZCByZXR1cm4gc2l6ZQorICoKKyAqIENoZWNrcyBp
ZiBhbGwgZWxlbWVudHMgb2YgYW4gYXJyYXkgb3IgdGFibGUgYXJlIHZhbGlkIGFuZCBoYXZlCisg
KiB0aGUgc3BlY2lmaWVkIHR5cGUuIFJldHVybnMgdGhlIG51bWJlciBvZiBlbGVtZW50cyBpbiB0
aGUgYXJyYXkuCisgKgorICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIHNhZmVyIGltcGxlbWVudGF0
aW9uIG9mIGJsb2Jtc2dfY2hlY2tfYXJyYXkuCisgKiBJdCB3aWxsIGxpbWl0IGFsbCBtZW1vcnkg
YWNjZXNzIHBlcmZvcm1lZCBvbiB0aGUgYmxvYiB0byB0aGUKKyAqIHJhbmdlIFthdHRyLCBhdHRy
ICsgbGVuXSAodXBwZXIgYm91bmQgbm9uIGluY2x1c2l2ZSkgYW5kIGlzCisgKiB0aHVzIHN1aXRl
ZCBmb3IgY2hlY2tpbmcgb2YgdW50cnVzdGVkIGJsb2IgYXR0cmlidXRlcy4KKyAqLworaW50IGJs
b2Jtc2dfY2hlY2tfYXJyYXlfbGVuKGNvbnN0IHN0cnVjdCBibG9iX2F0dHIgKmF0dHIsIGludCB0
eXBlLCBzaXplX3QgbGVuKTsKKwogaW50IGJsb2Jtc2dfcGFyc2UoY29uc3Qgc3RydWN0IGJsb2Jt
c2dfcG9saWN5ICpwb2xpY3ksIGludCBwb2xpY3lfbGVuLAogICAgICAgICAgICAgICAgICAgc3Ry
dWN0IGJsb2JfYXR0ciAqKnRiLCB2b2lkICpkYXRhLCB1bnNpZ25lZCBpbnQgbGVuKTsKIGludCBi
bG9ibXNnX3BhcnNlX2FycmF5KGNvbnN0IHN0cnVjdCBibG9ibXNnX3BvbGljeSAqcG9saWN5LCBp
bnQgcG9saWN5X2xlbiwKQEAgLTI3Miw0ICszMTksMTAgQEAgaW50IGJsb2Jtc2dfcHJpbnRmKHN0
cnVjdCBibG9iX2J1ZiAqYnVmLCBjb25zdCBjaGFyICpuYW1lLCBjb25zdCBjaGFyICpmb3JtYXQs
IC4KIAkgICAgIChibG9iX3BhZF9sZW4ocG9zKSA+PSBzaXplb2Yoc3RydWN0IGJsb2JfYXR0cikp
OyBcCiAJICAgICByZW0gLT0gYmxvYl9wYWRfbGVuKHBvcyksIHBvcyA9IGJsb2JfbmV4dChwb3Mp
KQogCisjZGVmaW5lIF9fYmxvYm1zZ19mb3JfZWFjaF9hdHRyKHBvcywgYXR0ciwgcmVtKSBcCisJ
Zm9yIChwb3MgPSAoc3RydWN0IGJsb2JfYXR0ciAqKSAoYXR0ciA/IGJsb2Jtc2dfZGF0YShhdHRy
KSA6IE5VTEwpOyBcCisJICAgICByZW0gPj0gc2l6ZW9mKHN0cnVjdCBibG9iX2F0dHIpICYmIChi
bG9iX3BhZF9sZW4ocG9zKSA8PSByZW0pICYmIFwKKwkgICAgIChibG9iX3BhZF9sZW4ocG9zKSA+
PSBzaXplb2Yoc3RydWN0IGJsb2JfYXR0cikpOyBcCisJICAgICByZW0gLT0gYmxvYl9wYWRfbGVu
KHBvcyksIHBvcyA9IGJsb2JfbmV4dChwb3MpKQorCiAjZW5kaWYKCl9fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX19fX19fCm9wZW53cnQtZGV2ZWwgbWFpbGluZyBsaXN0
Cm9wZW53cnQtZGV2ZWxAbGlzdHMub3BlbndydC5vcmcKaHR0cHM6Ly9saXN0cy5vcGVud3J0Lm9y
Zy9tYWlsbWFuL2xpc3RpbmZvL29wZW53cnQtZGV2ZWwK
